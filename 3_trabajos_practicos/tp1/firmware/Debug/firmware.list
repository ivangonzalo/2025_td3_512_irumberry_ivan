
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003df4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003f04  08003f04  00013f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f4c  08003f4c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003f4c  08003f4c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f4c  08003f4c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f4c  08003f4c  00013f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f50  08003f50  00013f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000078  08003fcc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08003fcc  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011174  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027b2  00000000  00000000  00031215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  000339c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  00034850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000169af  00000000  00000000  000355b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f43c  00000000  00000000  0004bf5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090250  00000000  00000000  0005b39b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eb5eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da4  00000000  00000000  000eb640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08003eec 	.word	0x08003eec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08003eec 	.word	0x08003eec

08000150 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
    void * pvReturn;

    vTaskSuspendAll();
 8000158:	f001 fb76 	bl	8001848 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
 800015c:	6878      	ldr	r0, [r7, #4]
 800015e:	f003 fddb 	bl	8003d18 <malloc>
 8000162:	4603      	mov	r3, r0
 8000164:	60fb      	str	r3, [r7, #12]
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8000166:	f001 fbb3 	bl	80018d0 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 800016a:	68fb      	ldr	r3, [r7, #12]
}
 800016c:	4618      	mov	r0, r3
 800016e:	3710      	adds	r7, #16
 8000170:	46bd      	mov	sp, r7
 8000172:	bd80      	pop	{r7, pc}

08000174 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
    if( pv != NULL )
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d006      	beq.n	8000190 <vPortFree+0x1c>
    {
        vTaskSuspendAll();
 8000182:	f001 fb61 	bl	8001848 <vTaskSuspendAll>
        {
            free( pv );
 8000186:	6878      	ldr	r0, [r7, #4]
 8000188:	f003 fdce 	bl	8003d28 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
 800018c:	f001 fba0 	bl	80018d0 <xTaskResumeAll>
    }
}
 8000190:	bf00      	nop
 8000192:	3708      	adds	r7, #8
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}

08000198 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000198:	b480      	push	{r7}
 800019a:	b083      	sub	sp, #12
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	f103 0208 	add.w	r2, r3, #8
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	f04f 32ff 	mov.w	r2, #4294967295
 80001b0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f103 0208 	add.w	r2, r3, #8
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	f103 0208 	add.w	r2, r3, #8
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001cc:	bf00      	nop
 80001ce:	370c      	adds	r7, #12
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr

080001d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001d6:	b480      	push	{r7}
 80001d8:	b083      	sub	sp, #12
 80001da:	af00      	add	r7, sp, #0
 80001dc:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2200      	movs	r2, #0
 80001e2:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001e4:	bf00      	nop
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bc80      	pop	{r7}
 80001ec:	4770      	bx	lr

080001ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80001ee:	b480      	push	{r7}
 80001f0:	b085      	sub	sp, #20
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	6078      	str	r0, [r7, #4]
 80001f6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	685b      	ldr	r3, [r3, #4]
 80001fc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	68fa      	ldr	r2, [r7, #12]
 8000202:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	689a      	ldr	r2, [r3, #8]
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	689b      	ldr	r3, [r3, #8]
 8000210:	683a      	ldr	r2, [r7, #0]
 8000212:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	683a      	ldr	r2, [r7, #0]
 8000218:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	687a      	ldr	r2, [r7, #4]
 800021e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	1c5a      	adds	r2, r3, #1
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	601a      	str	r2, [r3, #0]
}
 800022a:	bf00      	nop
 800022c:	3714      	adds	r7, #20
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr

08000234 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000234:	b480      	push	{r7}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800024a:	d103      	bne.n	8000254 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	691b      	ldr	r3, [r3, #16]
 8000250:	60fb      	str	r3, [r7, #12]
 8000252:	e00c      	b.n	800026e <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	3308      	adds	r3, #8
 8000258:	60fb      	str	r3, [r7, #12]
 800025a:	e002      	b.n	8000262 <vListInsert+0x2e>
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	60fb      	str	r3, [r7, #12]
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	685b      	ldr	r3, [r3, #4]
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	68ba      	ldr	r2, [r7, #8]
 800026a:	429a      	cmp	r2, r3
 800026c:	d2f6      	bcs.n	800025c <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	685a      	ldr	r2, [r3, #4]
 8000272:	683b      	ldr	r3, [r7, #0]
 8000274:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	685b      	ldr	r3, [r3, #4]
 800027a:	683a      	ldr	r2, [r7, #0]
 800027c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	68fa      	ldr	r2, [r7, #12]
 8000282:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	683a      	ldr	r2, [r7, #0]
 8000288:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	687a      	ldr	r2, [r7, #4]
 800028e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	1c5a      	adds	r2, r3, #1
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	601a      	str	r2, [r3, #0]
}
 800029a:	bf00      	nop
 800029c:	3714      	adds	r7, #20
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr

080002a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	691b      	ldr	r3, [r3, #16]
 80002b0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	687a      	ldr	r2, [r7, #4]
 80002b8:	6892      	ldr	r2, [r2, #8]
 80002ba:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	689b      	ldr	r3, [r3, #8]
 80002c0:	687a      	ldr	r2, [r7, #4]
 80002c2:	6852      	ldr	r2, [r2, #4]
 80002c4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	685b      	ldr	r3, [r3, #4]
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	429a      	cmp	r2, r3
 80002ce:	d103      	bne.n	80002d8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	689a      	ldr	r2, [r3, #8]
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2200      	movs	r2, #0
 80002dc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	1e5a      	subs	r2, r3, #1
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	681b      	ldr	r3, [r3, #0]
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	3714      	adds	r7, #20
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
	...

080002f8 <Encendido>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


static void Encendido(void *pvParameters){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	while(1)
	{
		/* Enciendo el led */
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000300:	2201      	movs	r2, #1
 8000302:	2101      	movs	r1, #1
 8000304:	4808      	ldr	r0, [pc, #32]	; (8000328 <Encendido+0x30>)
 8000306:	f002 fe5d 	bl	8002fc4 <HAL_GPIO_WritePin>

		/* Suspendo la Tarea 2 */
		vTaskSuspend(Tarea2Handle);
 800030a:	4b08      	ldr	r3, [pc, #32]	; (800032c <Encendido+0x34>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4618      	mov	r0, r3
 8000310:	f001 f910 	bl	8001534 <vTaskSuspend>

		/*Demora de 500 ms*/
		vTaskDelay(500/portTICK_PERIOD_MS);
 8000314:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000318:	f001 f8d8 	bl	80014cc <vTaskDelay>

		/* Habilito la Tarea 2 */
		vTaskResume(Tarea2Handle);
 800031c:	4b03      	ldr	r3, [pc, #12]	; (800032c <Encendido+0x34>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4618      	mov	r0, r3
 8000322:	f001 f9b9 	bl	8001698 <vTaskResume>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000326:	e7eb      	b.n	8000300 <Encendido+0x8>
 8000328:	40010c00 	.word	0x40010c00
 800032c:	200001f8 	.word	0x200001f8

08000330 <Apagado>:
	}
}



static void Apagado(void *pvParameters){
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
	while(1)
	{
		/* Apago el led */
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000338:	2200      	movs	r2, #0
 800033a:	2101      	movs	r1, #1
 800033c:	4808      	ldr	r0, [pc, #32]	; (8000360 <Apagado+0x30>)
 800033e:	f002 fe41 	bl	8002fc4 <HAL_GPIO_WritePin>

		/* Suspendo la Tarea 1 */
		vTaskSuspend(Tarea1Handle);
 8000342:	4b08      	ldr	r3, [pc, #32]	; (8000364 <Apagado+0x34>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4618      	mov	r0, r3
 8000348:	f001 f8f4 	bl	8001534 <vTaskSuspend>

		/*Demora de 500 ms*/
		vTaskDelay(500/portTICK_PERIOD_MS); //Relativiza la demora al tiempo del scheduler
 800034c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000350:	f001 f8bc 	bl	80014cc <vTaskDelay>

		/* Habilito la Tarea 1 */
		vTaskResume(Tarea1Handle);
 8000354:	4b03      	ldr	r3, [pc, #12]	; (8000364 <Apagado+0x34>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4618      	mov	r0, r3
 800035a:	f001 f99d 	bl	8001698 <vTaskResume>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800035e:	e7eb      	b.n	8000338 <Apagado+0x8>
 8000360:	40010c00 	.word	0x40010c00
 8000364:	200001f4 	.word	0x200001f4

08000368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800036e:	f002 fb93 	bl	8002a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000372:	f000 f827 	bl	80003c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000376:	f000 f86b 	bl	8000450 <MX_GPIO_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  xTaskCreate(Encendido, "", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, &Tarea1Handle);//Tarea encendido con prioridad 1
 800037a:	4b0d      	ldr	r3, [pc, #52]	; (80003b0 <main+0x48>)
 800037c:	9301      	str	r3, [sp, #4]
 800037e:	2301      	movs	r3, #1
 8000380:	9300      	str	r3, [sp, #0]
 8000382:	2300      	movs	r3, #0
 8000384:	2280      	movs	r2, #128	; 0x80
 8000386:	490b      	ldr	r1, [pc, #44]	; (80003b4 <main+0x4c>)
 8000388:	480b      	ldr	r0, [pc, #44]	; (80003b8 <main+0x50>)
 800038a:	f000 ff33 	bl	80011f4 <xTaskCreate>
  xTaskCreate(Apagado  , "", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, &Tarea2Handle);//Tarea apagado   con prioridad 1
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <main+0x54>)
 8000390:	9301      	str	r3, [sp, #4]
 8000392:	2301      	movs	r3, #1
 8000394:	9300      	str	r3, [sp, #0]
 8000396:	2300      	movs	r3, #0
 8000398:	2280      	movs	r2, #128	; 0x80
 800039a:	4906      	ldr	r1, [pc, #24]	; (80003b4 <main+0x4c>)
 800039c:	4808      	ldr	r0, [pc, #32]	; (80003c0 <main+0x58>)
 800039e:	f000 ff29 	bl	80011f4 <xTaskCreate>

  vTaskStartScheduler(); //Inicio el Scheduler
 80003a2:	f001 f9ff 	bl	80017a4 <vTaskStartScheduler>
 80003a6:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	200001f4 	.word	0x200001f4
 80003b4:	08003f04 	.word	0x08003f04
 80003b8:	080002f9 	.word	0x080002f9
 80003bc:	200001f8 	.word	0x200001f8
 80003c0:	08000331 	.word	0x08000331

080003c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b090      	sub	sp, #64	; 0x40
 80003c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ca:	f107 0318 	add.w	r3, r7, #24
 80003ce:	2228      	movs	r2, #40	; 0x28
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f003 fcbe 	bl	8003d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
 80003e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003e6:	2301      	movs	r3, #1
 80003e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003f0:	2300      	movs	r3, #0
 80003f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f4:	2301      	movs	r3, #1
 80003f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f8:	2302      	movs	r3, #2
 80003fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000400:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000402:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000406:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000408:	f107 0318 	add.w	r3, r7, #24
 800040c:	4618      	mov	r0, r3
 800040e:	f002 fdf1 	bl	8002ff4 <HAL_RCC_OscConfig>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000418:	f000 f876 	bl	8000508 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800041c:	230f      	movs	r3, #15
 800041e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000420:	2302      	movs	r3, #2
 8000422:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000424:	2300      	movs	r3, #0
 8000426:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800042c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800042e:	2300      	movs	r3, #0
 8000430:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	2102      	movs	r1, #2
 8000436:	4618      	mov	r0, r3
 8000438:	f003 f85c 	bl	80034f4 <HAL_RCC_ClockConfig>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000442:	f000 f861 	bl	8000508 <Error_Handler>
  }
}
 8000446:	bf00      	nop
 8000448:	3740      	adds	r7, #64	; 0x40
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
	...

08000450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b088      	sub	sp, #32
 8000454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000456:	f107 0310 	add.w	r3, r7, #16
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]
 8000460:	609a      	str	r2, [r3, #8]
 8000462:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000464:	4b1d      	ldr	r3, [pc, #116]	; (80004dc <MX_GPIO_Init+0x8c>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4a1c      	ldr	r2, [pc, #112]	; (80004dc <MX_GPIO_Init+0x8c>)
 800046a:	f043 0320 	orr.w	r3, r3, #32
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	4b1a      	ldr	r3, [pc, #104]	; (80004dc <MX_GPIO_Init+0x8c>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f003 0320 	and.w	r3, r3, #32
 8000478:	60fb      	str	r3, [r7, #12]
 800047a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047c:	4b17      	ldr	r3, [pc, #92]	; (80004dc <MX_GPIO_Init+0x8c>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	4a16      	ldr	r2, [pc, #88]	; (80004dc <MX_GPIO_Init+0x8c>)
 8000482:	f043 0308 	orr.w	r3, r3, #8
 8000486:	6193      	str	r3, [r2, #24]
 8000488:	4b14      	ldr	r3, [pc, #80]	; (80004dc <MX_GPIO_Init+0x8c>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f003 0308 	and.w	r3, r3, #8
 8000490:	60bb      	str	r3, [r7, #8]
 8000492:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000494:	4b11      	ldr	r3, [pc, #68]	; (80004dc <MX_GPIO_Init+0x8c>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a10      	ldr	r2, [pc, #64]	; (80004dc <MX_GPIO_Init+0x8c>)
 800049a:	f043 0304 	orr.w	r3, r3, #4
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <MX_GPIO_Init+0x8c>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f003 0304 	and.w	r3, r3, #4
 80004a8:	607b      	str	r3, [r7, #4]
 80004aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	2101      	movs	r1, #1
 80004b0:	480b      	ldr	r0, [pc, #44]	; (80004e0 <MX_GPIO_Init+0x90>)
 80004b2:	f002 fd87 	bl	8002fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004b6:	2301      	movs	r3, #1
 80004b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ba:	2301      	movs	r3, #1
 80004bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004be:	2300      	movs	r3, #0
 80004c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c2:	2302      	movs	r3, #2
 80004c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004c6:	f107 0310 	add.w	r3, r7, #16
 80004ca:	4619      	mov	r1, r3
 80004cc:	4804      	ldr	r0, [pc, #16]	; (80004e0 <MX_GPIO_Init+0x90>)
 80004ce:	f002 fbf5 	bl	8002cbc <HAL_GPIO_Init>

}
 80004d2:	bf00      	nop
 80004d4:	3720      	adds	r7, #32
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40010c00 	.word	0x40010c00

080004e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a04      	ldr	r2, [pc, #16]	; (8000504 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d101      	bne.n	80004fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004f6:	f002 fae5 	bl	8002ac4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40012c00 	.word	0x40012c00

08000508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050c:	b672      	cpsid	i
}
 800050e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000510:	e7fe      	b.n	8000510 <Error_Handler+0x8>
	...

08000514 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	3b04      	subs	r3, #4
 8000524:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800052c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	3b04      	subs	r3, #4
 8000532:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	f023 0201 	bic.w	r2, r3, #1
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	3b04      	subs	r3, #4
 8000542:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000544:	4a08      	ldr	r2, [pc, #32]	; (8000568 <pxPortInitialiseStack+0x54>)
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	3b14      	subs	r3, #20
 800054e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	3b20      	subs	r3, #32
 800055a:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800055c:	68fb      	ldr	r3, [r7, #12]
}
 800055e:	4618      	mov	r0, r3
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr
 8000568:	0800056d 	.word	0x0800056d

0800056c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <prvTaskExitError+0x54>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800057e:	d00a      	beq.n	8000596 <prvTaskExitError+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000584:	f383 8811 	msr	BASEPRI, r3
 8000588:	f3bf 8f6f 	isb	sy
 800058c:	f3bf 8f4f 	dsb	sy
 8000590:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000592:	bf00      	nop
 8000594:	e7fe      	b.n	8000594 <prvTaskExitError+0x28>
        __asm volatile
 8000596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800059a:	f383 8811 	msr	BASEPRI, r3
 800059e:	f3bf 8f6f 	isb	sy
 80005a2:	f3bf 8f4f 	dsb	sy
 80005a6:	60bb      	str	r3, [r7, #8]
    }
 80005a8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80005aa:	bf00      	nop
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0fc      	beq.n	80005ac <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80005b2:	bf00      	nop
 80005b4:	bf00      	nop
 80005b6:	3714      	adds	r7, #20
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000000 	.word	0x20000000
	...

080005d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80005d0:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <pxCurrentTCBConst2>)
 80005d2:	6819      	ldr	r1, [r3, #0]
 80005d4:	6808      	ldr	r0, [r1, #0]
 80005d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80005da:	f380 8809 	msr	PSP, r0
 80005de:	f3bf 8f6f 	isb	sy
 80005e2:	f04f 0000 	mov.w	r0, #0
 80005e6:	f380 8811 	msr	BASEPRI, r0
 80005ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80005ee:	4770      	bx	lr

080005f0 <pxCurrentTCBConst2>:
 80005f0:	200000ac 	.word	0x200000ac
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop

080005f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 80005f8:	4806      	ldr	r0, [pc, #24]	; (8000614 <prvPortStartFirstTask+0x1c>)
 80005fa:	6800      	ldr	r0, [r0, #0]
 80005fc:	6800      	ldr	r0, [r0, #0]
 80005fe:	f380 8808 	msr	MSP, r0
 8000602:	b662      	cpsie	i
 8000604:	b661      	cpsie	f
 8000606:	f3bf 8f4f 	dsb	sy
 800060a:	f3bf 8f6f 	isb	sy
 800060e:	df00      	svc	0
 8000610:	bf00      	nop
 8000612:	0000      	.short	0x0000
 8000614:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000618:	bf00      	nop
 800061a:	bf00      	nop

0800061c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000622:	4b32      	ldr	r3, [pc, #200]	; (80006ec <xPortStartScheduler+0xd0>)
 8000624:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	b2db      	uxtb	r3, r3
 800062c:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	22ff      	movs	r2, #255	; 0xff
 8000632:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	b2db      	uxtb	r3, r3
 800063a:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800063c:	78fb      	ldrb	r3, [r7, #3]
 800063e:	b2db      	uxtb	r3, r3
 8000640:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <xPortStartScheduler+0xd4>)
 8000648:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800064a:	4b2a      	ldr	r3, [pc, #168]	; (80006f4 <xPortStartScheduler+0xd8>)
 800064c:	2207      	movs	r2, #7
 800064e:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000650:	e009      	b.n	8000666 <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 8000652:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <xPortStartScheduler+0xd8>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	3b01      	subs	r3, #1
 8000658:	4a26      	ldr	r2, [pc, #152]	; (80006f4 <xPortStartScheduler+0xd8>)
 800065a:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800065c:	78fb      	ldrb	r3, [r7, #3]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	b2db      	uxtb	r3, r3
 8000664:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000666:	78fb      	ldrb	r3, [r7, #3]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800066e:	2b80      	cmp	r3, #128	; 0x80
 8000670:	d0ef      	beq.n	8000652 <xPortStartScheduler+0x36>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000672:	4b20      	ldr	r3, [pc, #128]	; (80006f4 <xPortStartScheduler+0xd8>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f1c3 0307 	rsb	r3, r3, #7
 800067a:	2b04      	cmp	r3, #4
 800067c:	d00a      	beq.n	8000694 <xPortStartScheduler+0x78>
        __asm volatile
 800067e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000682:	f383 8811 	msr	BASEPRI, r3
 8000686:	f3bf 8f6f 	isb	sy
 800068a:	f3bf 8f4f 	dsb	sy
 800068e:	60bb      	str	r3, [r7, #8]
    }
 8000690:	bf00      	nop
 8000692:	e7fe      	b.n	8000692 <xPortStartScheduler+0x76>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <xPortStartScheduler+0xd8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	021b      	lsls	r3, r3, #8
 800069a:	4a16      	ldr	r2, [pc, #88]	; (80006f4 <xPortStartScheduler+0xd8>)
 800069c:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <xPortStartScheduler+0xd8>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80006a6:	4a13      	ldr	r2, [pc, #76]	; (80006f4 <xPortStartScheduler+0xd8>)
 80006a8:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <xPortStartScheduler+0xdc>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a10      	ldr	r2, [pc, #64]	; (80006f8 <xPortStartScheduler+0xdc>)
 80006b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006bc:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <xPortStartScheduler+0xdc>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a0d      	ldr	r2, [pc, #52]	; (80006f8 <xPortStartScheduler+0xdc>)
 80006c4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80006c8:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80006ca:	f000 f981 	bl	80009d0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <xPortStartScheduler+0xe0>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80006d4:	f7ff ff90 	bl	80005f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80006d8:	f001 fb76 	bl	8001dc8 <vTaskSwitchContext>
    prvTaskExitError();
 80006dc:	f7ff ff46 	bl	800056c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80006e0:	2300      	movs	r3, #0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	e000e400 	.word	0xe000e400
 80006f0:	200000a0 	.word	0x200000a0
 80006f4:	200000a4 	.word	0x200000a4
 80006f8:	e000ed20 	.word	0xe000ed20
 80006fc:	20000000 	.word	0x20000000

08000700 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
        __asm volatile
 8000706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070a:	f383 8811 	msr	BASEPRI, r3
 800070e:	f3bf 8f6f 	isb	sy
 8000712:	f3bf 8f4f 	dsb	sy
 8000716:	607b      	str	r3, [r7, #4]
    }
 8000718:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <vPortEnterCritical+0x58>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	3301      	adds	r3, #1
 8000720:	4a0d      	ldr	r2, [pc, #52]	; (8000758 <vPortEnterCritical+0x58>)
 8000722:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <vPortEnterCritical+0x58>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d10f      	bne.n	800074c <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800072c:	4b0b      	ldr	r3, [pc, #44]	; (800075c <vPortEnterCritical+0x5c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	2b00      	cmp	r3, #0
 8000734:	d00a      	beq.n	800074c <vPortEnterCritical+0x4c>
        __asm volatile
 8000736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800073a:	f383 8811 	msr	BASEPRI, r3
 800073e:	f3bf 8f6f 	isb	sy
 8000742:	f3bf 8f4f 	dsb	sy
 8000746:	603b      	str	r3, [r7, #0]
    }
 8000748:	bf00      	nop
 800074a:	e7fe      	b.n	800074a <vPortEnterCritical+0x4a>
    }
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	20000000 	.word	0x20000000
 800075c:	e000ed04 	.word	0xe000ed04

08000760 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <vPortExitCritical+0x4c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d10a      	bne.n	8000784 <vPortExitCritical+0x24>
        __asm volatile
 800076e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000772:	f383 8811 	msr	BASEPRI, r3
 8000776:	f3bf 8f6f 	isb	sy
 800077a:	f3bf 8f4f 	dsb	sy
 800077e:	607b      	str	r3, [r7, #4]
    }
 8000780:	bf00      	nop
 8000782:	e7fe      	b.n	8000782 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <vPortExitCritical+0x4c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	3b01      	subs	r3, #1
 800078a:	4a08      	ldr	r2, [pc, #32]	; (80007ac <vPortExitCritical+0x4c>)
 800078c:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800078e:	4b07      	ldr	r3, [pc, #28]	; (80007ac <vPortExitCritical+0x4c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d105      	bne.n	80007a2 <vPortExitCritical+0x42>
 8000796:	2300      	movs	r3, #0
 8000798:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80007a0:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	20000000 	.word	0x20000000

080007b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80007b0:	f3ef 8009 	mrs	r0, PSP
 80007b4:	f3bf 8f6f 	isb	sy
 80007b8:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <pxCurrentTCBConst>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80007c0:	6010      	str	r0, [r2, #0]
 80007c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80007c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80007ca:	f380 8811 	msr	BASEPRI, r0
 80007ce:	f001 fafb 	bl	8001dc8 <vTaskSwitchContext>
 80007d2:	f04f 0000 	mov.w	r0, #0
 80007d6:	f380 8811 	msr	BASEPRI, r0
 80007da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007de:	6819      	ldr	r1, [r3, #0]
 80007e0:	6808      	ldr	r0, [r1, #0]
 80007e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80007e6:	f380 8809 	msr	PSP, r0
 80007ea:	f3bf 8f6f 	isb	sy
 80007ee:	4770      	bx	lr

080007f0 <pxCurrentTCBConst>:
 80007f0:	200000ac 	.word	0x200000ac
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80007f4:	bf00      	nop
 80007f6:	bf00      	nop

080007f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
        __asm volatile
 80007fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000802:	f383 8811 	msr	BASEPRI, r3
 8000806:	f3bf 8f6f 	isb	sy
 800080a:	f3bf 8f4f 	dsb	sy
 800080e:	607b      	str	r3, [r7, #4]
    }
 8000810:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000812:	f001 f9c1 	bl	8001b98 <xTaskIncrementTick>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d003      	beq.n	8000824 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <SysTick_Handler+0x40>)
 800081e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	2300      	movs	r3, #0
 8000826:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	f383 8811 	msr	BASEPRI, r3
    }
 800082e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	e000ed04 	.word	0xe000ed04

0800083c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE == 1 )

    __attribute__( ( weak ) ) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
    {
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
        uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickDecrementsLeft;
        TickType_t xModifiableIdleTime;

        /* Make sure the SysTick reload value does not overflow the counter. */
        if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8000844:	4b5b      	ldr	r3, [pc, #364]	; (80009b4 <vPortSuppressTicksAndSleep+0x178>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	429a      	cmp	r2, r3
 800084c:	d902      	bls.n	8000854 <vPortSuppressTicksAndSleep+0x18>
        {
            xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800084e:	4b59      	ldr	r3, [pc, #356]	; (80009b4 <vPortSuppressTicksAndSleep+0x178>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	607b      	str	r3, [r7, #4]
        }

        /* Enter a critical section but don't use the taskENTER_CRITICAL()
         * method as that will mask interrupts that should exit sleep mode. */
        __asm volatile ( "cpsid i" ::: "memory" );
 8000854:	b672      	cpsid	i
        __asm volatile ( "dsb" );
 8000856:	f3bf 8f4f 	dsb	sy
        __asm volatile ( "isb" );
 800085a:	f3bf 8f6f 	isb	sy

        /* If a context switch is pending or a task is waiting for the scheduler
         * to be unsuspended then abandon the low power entry. */
        if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800085e:	f001 fd19 	bl	8002294 <eTaskConfirmSleepModeStatus>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d101      	bne.n	800086c <vPortSuppressTicksAndSleep+0x30>
        {
            /* Re-enable interrupts - see comments above the cpsid instruction
             * above. */
            __asm volatile ( "cpsie i" ::: "memory" );
 8000868:	b662      	cpsie	i
            vTaskStepTick( ulCompleteTickPeriods );

            /* Exit with interrupts enabled. */
            __asm volatile ( "cpsie i" ::: "memory" );
        }
    }
 800086a:	e09e      	b.n	80009aa <vPortSuppressTicksAndSleep+0x16e>
            portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT );
 800086c:	4b52      	ldr	r3, [pc, #328]	; (80009b8 <vPortSuppressTicksAndSleep+0x17c>)
 800086e:	2206      	movs	r2, #6
 8000870:	601a      	str	r2, [r3, #0]
            ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8000872:	4b52      	ldr	r3, [pc, #328]	; (80009bc <vPortSuppressTicksAndSleep+0x180>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	617b      	str	r3, [r7, #20]
            if( ulSysTickDecrementsLeft == 0 )
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d102      	bne.n	8000884 <vPortSuppressTicksAndSleep+0x48>
                ulSysTickDecrementsLeft = ulTimerCountsForOneTick;
 800087e:	4b50      	ldr	r3, [pc, #320]	; (80009c0 <vPortSuppressTicksAndSleep+0x184>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	617b      	str	r3, [r7, #20]
            ulReloadValue = ulSysTickDecrementsLeft + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3b01      	subs	r3, #1
 8000888:	4a4d      	ldr	r2, [pc, #308]	; (80009c0 <vPortSuppressTicksAndSleep+0x184>)
 800088a:	6812      	ldr	r2, [r2, #0]
 800088c:	fb02 f303 	mul.w	r3, r2, r3
 8000890:	697a      	ldr	r2, [r7, #20]
 8000892:	4413      	add	r3, r2
 8000894:	61fb      	str	r3, [r7, #28]
            if( ( portNVIC_INT_CTRL_REG & portNVIC_PEND_SYSTICK_SET_BIT ) != 0 )
 8000896:	4b4b      	ldr	r3, [pc, #300]	; (80009c4 <vPortSuppressTicksAndSleep+0x188>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d008      	beq.n	80008b4 <vPortSuppressTicksAndSleep+0x78>
                portNVIC_INT_CTRL_REG = portNVIC_PEND_SYSTICK_CLEAR_BIT;
 80008a2:	4b48      	ldr	r3, [pc, #288]	; (80009c4 <vPortSuppressTicksAndSleep+0x188>)
 80008a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80008a8:	601a      	str	r2, [r3, #0]
                ulReloadValue -= ulTimerCountsForOneTick;
 80008aa:	4b45      	ldr	r3, [pc, #276]	; (80009c0 <vPortSuppressTicksAndSleep+0x184>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	69fa      	ldr	r2, [r7, #28]
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	61fb      	str	r3, [r7, #28]
            if( ulReloadValue > ulStoppedTimerCompensation )
 80008b4:	4b44      	ldr	r3, [pc, #272]	; (80009c8 <vPortSuppressTicksAndSleep+0x18c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	69fa      	ldr	r2, [r7, #28]
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d904      	bls.n	80008c8 <vPortSuppressTicksAndSleep+0x8c>
                ulReloadValue -= ulStoppedTimerCompensation;
 80008be:	4b42      	ldr	r3, [pc, #264]	; (80009c8 <vPortSuppressTicksAndSleep+0x18c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	69fa      	ldr	r2, [r7, #28]
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	61fb      	str	r3, [r7, #28]
            portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 80008c8:	4a40      	ldr	r2, [pc, #256]	; (80009cc <vPortSuppressTicksAndSleep+0x190>)
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	6013      	str	r3, [r2, #0]
            portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80008ce:	4b3b      	ldr	r3, [pc, #236]	; (80009bc <vPortSuppressTicksAndSleep+0x180>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
            portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80008d4:	4b38      	ldr	r3, [pc, #224]	; (80009b8 <vPortSuppressTicksAndSleep+0x17c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a37      	ldr	r2, [pc, #220]	; (80009b8 <vPortSuppressTicksAndSleep+0x17c>)
 80008da:	f043 0301 	orr.w	r3, r3, #1
 80008de:	6013      	str	r3, [r2, #0]
            xModifiableIdleTime = xExpectedIdleTime;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	60fb      	str	r3, [r7, #12]
            if( xModifiableIdleTime > 0 )
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d004      	beq.n	80008f4 <vPortSuppressTicksAndSleep+0xb8>
                __asm volatile ( "dsb" ::: "memory" );
 80008ea:	f3bf 8f4f 	dsb	sy
                __asm volatile ( "wfi" );
 80008ee:	bf30      	wfi
                __asm volatile ( "isb" );
 80008f0:	f3bf 8f6f 	isb	sy
            __asm volatile ( "cpsie i" ::: "memory" );
 80008f4:	b662      	cpsie	i
            __asm volatile ( "dsb" );
 80008f6:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 80008fa:	f3bf 8f6f 	isb	sy
            __asm volatile ( "cpsid i" ::: "memory" );
 80008fe:	b672      	cpsid	i
            __asm volatile ( "dsb" );
 8000900:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 8000904:	f3bf 8f6f 	isb	sy
            portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT );
 8000908:	4b2b      	ldr	r3, [pc, #172]	; (80009b8 <vPortSuppressTicksAndSleep+0x17c>)
 800090a:	2206      	movs	r2, #6
 800090c:	601a      	str	r2, [r3, #0]
            if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800090e:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <vPortSuppressTicksAndSleep+0x17c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000916:	2b00      	cmp	r3, #0
 8000918:	d01d      	beq.n	8000956 <vPortSuppressTicksAndSleep+0x11a>
                ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800091a:	4b29      	ldr	r3, [pc, #164]	; (80009c0 <vPortSuppressTicksAndSleep+0x184>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	4b27      	ldr	r3, [pc, #156]	; (80009bc <vPortSuppressTicksAndSleep+0x180>)
 8000920:	6819      	ldr	r1, [r3, #0]
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	1acb      	subs	r3, r1, r3
 8000926:	4413      	add	r3, r2
 8000928:	3b01      	subs	r3, #1
 800092a:	613b      	str	r3, [r7, #16]
                if( ( ulCalculatedLoadValue <= ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800092c:	4b26      	ldr	r3, [pc, #152]	; (80009c8 <vPortSuppressTicksAndSleep+0x18c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	429a      	cmp	r2, r3
 8000934:	d904      	bls.n	8000940 <vPortSuppressTicksAndSleep+0x104>
 8000936:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <vPortSuppressTicksAndSleep+0x184>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	429a      	cmp	r2, r3
 800093e:	d903      	bls.n	8000948 <vPortSuppressTicksAndSleep+0x10c>
                    ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8000940:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <vPortSuppressTicksAndSleep+0x184>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	3b01      	subs	r3, #1
 8000946:	613b      	str	r3, [r7, #16]
                portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 8000948:	4a20      	ldr	r2, [pc, #128]	; (80009cc <vPortSuppressTicksAndSleep+0x190>)
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	6013      	str	r3, [r2, #0]
                ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3b01      	subs	r3, #1
 8000952:	61bb      	str	r3, [r7, #24]
 8000954:	e01a      	b.n	800098c <vPortSuppressTicksAndSleep+0x150>
                ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <vPortSuppressTicksAndSleep+0x180>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	617b      	str	r3, [r7, #20]
                ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - ulSysTickDecrementsLeft;
 800095c:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <vPortSuppressTicksAndSleep+0x184>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	fb02 f203 	mul.w	r2, r2, r3
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	60bb      	str	r3, [r7, #8]
                ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <vPortSuppressTicksAndSleep+0x184>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	68ba      	ldr	r2, [r7, #8]
 8000972:	fbb2 f3f3 	udiv	r3, r2, r3
 8000976:	61bb      	str	r3, [r7, #24]
                portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	3301      	adds	r3, #1
 800097c:	4a10      	ldr	r2, [pc, #64]	; (80009c0 <vPortSuppressTicksAndSleep+0x184>)
 800097e:	6812      	ldr	r2, [r2, #0]
 8000980:	fb02 f203 	mul.w	r2, r2, r3
 8000984:	4911      	ldr	r1, [pc, #68]	; (80009cc <vPortSuppressTicksAndSleep+0x190>)
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	600b      	str	r3, [r1, #0]
            portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <vPortSuppressTicksAndSleep+0x180>)
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
            portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <vPortSuppressTicksAndSleep+0x17c>)
 8000994:	2207      	movs	r2, #7
 8000996:	601a      	str	r2, [r3, #0]
                portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <vPortSuppressTicksAndSleep+0x184>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <vPortSuppressTicksAndSleep+0x190>)
 800099e:	3b01      	subs	r3, #1
 80009a0:	6013      	str	r3, [r2, #0]
            vTaskStepTick( ulCompleteTickPeriods );
 80009a2:	69b8      	ldr	r0, [r7, #24]
 80009a4:	f001 f89e 	bl	8001ae4 <vTaskStepTick>
            __asm volatile ( "cpsie i" ::: "memory" );
 80009a8:	b662      	cpsie	i
    }
 80009aa:	bf00      	nop
 80009ac:	3720      	adds	r7, #32
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000098 	.word	0x20000098
 80009b8:	e000e010 	.word	0xe000e010
 80009bc:	e000e018 	.word	0xe000e018
 80009c0:	20000094 	.word	0x20000094
 80009c4:	e000ed04 	.word	0xe000ed04
 80009c8:	2000009c 	.word	0x2000009c
 80009cc:	e000e014 	.word	0xe000e014

080009d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
    /* Calculate the constants required to configure the tick interrupt. */
    #if ( configUSE_TICKLESS_IDLE == 1 )
    {
        ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <vPortSetupTimerInterrupt+0x58>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a14      	ldr	r2, [pc, #80]	; (8000a2c <vPortSetupTimerInterrupt+0x5c>)
 80009da:	fba2 2303 	umull	r2, r3, r2, r3
 80009de:	099b      	lsrs	r3, r3, #6
 80009e0:	4a13      	ldr	r2, [pc, #76]	; (8000a30 <vPortSetupTimerInterrupt+0x60>)
 80009e2:	6013      	str	r3, [r2, #0]
        xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <vPortSetupTimerInterrupt+0x60>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80009ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f0:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <vPortSetupTimerInterrupt+0x64>)
 80009f2:	6013      	str	r3, [r2, #0]
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 80009f4:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <vPortSetupTimerInterrupt+0x68>)
 80009f6:	225e      	movs	r2, #94	; 0x5e
 80009f8:	601a      	str	r2, [r3, #0]
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <vPortSetupTimerInterrupt+0x6c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <vPortSetupTimerInterrupt+0x70>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <vPortSetupTimerInterrupt+0x58>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <vPortSetupTimerInterrupt+0x5c>)
 8000a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a10:	099b      	lsrs	r3, r3, #6
 8000a12:	4a0c      	ldr	r2, [pc, #48]	; (8000a44 <vPortSetupTimerInterrupt+0x74>)
 8000a14:	3b01      	subs	r3, #1
 8000a16:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <vPortSetupTimerInterrupt+0x6c>)
 8000a1a:	2207      	movs	r2, #7
 8000a1c:	601a      	str	r2, [r3, #0]
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	20000004 	.word	0x20000004
 8000a2c:	10624dd3 	.word	0x10624dd3
 8000a30:	20000094 	.word	0x20000094
 8000a34:	20000098 	.word	0x20000098
 8000a38:	2000009c 	.word	0x2000009c
 8000a3c:	e000e010 	.word	0xe000e010
 8000a40:	e000e018 	.word	0xe000e018
 8000a44:	e000e014 	.word	0xe000e014

08000a48 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000a52:	2301      	movs	r3, #1
 8000a54:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d10a      	bne.n	8000a76 <xQueueGenericReset+0x2e>
        __asm volatile
 8000a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a64:	f383 8811 	msr	BASEPRI, r3
 8000a68:	f3bf 8f6f 	isb	sy
 8000a6c:	f3bf 8f4f 	dsb	sy
 8000a70:	60fb      	str	r3, [r7, #12]
    }
 8000a72:	bf00      	nop
 8000a74:	e7fe      	b.n	8000a74 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d05d      	beq.n	8000b38 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d059      	beq.n	8000b38 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	fba3 2302 	umull	r2, r3, r3, r2
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d000      	beq.n	8000a98 <xQueueGenericReset+0x50>
 8000a96:	2101      	movs	r1, #1
 8000a98:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d14c      	bne.n	8000b38 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8000a9e:	f7ff fe2f 	bl	8000700 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aaa:	6939      	ldr	r1, [r7, #16]
 8000aac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000aae:	fb01 f303 	mul.w	r3, r1, r3
 8000ab2:	441a      	add	r2, r3
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	2200      	movs	r2, #0
 8000abc:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	6939      	ldr	r1, [r7, #16]
 8000ad2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000ad4:	fb01 f303 	mul.w	r3, r1, r3
 8000ad8:	441a      	add	r2, r3
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	22ff      	movs	r2, #255	; 0xff
 8000ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	22ff      	movs	r2, #255	; 0xff
 8000aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d114      	bne.n	8000b1e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	691b      	ldr	r3, [r3, #16]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d01a      	beq.n	8000b32 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	3310      	adds	r3, #16
 8000b00:	4618      	mov	r0, r3
 8000b02:	f001 fa27 	bl	8001f54 <xTaskRemoveFromEventList>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d012      	beq.n	8000b32 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000b0c:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <xQueueGenericReset+0x11c>)
 8000b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	f3bf 8f4f 	dsb	sy
 8000b18:	f3bf 8f6f 	isb	sy
 8000b1c:	e009      	b.n	8000b32 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	3310      	adds	r3, #16
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fb38 	bl	8000198 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	3324      	adds	r3, #36	; 0x24
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fb33 	bl	8000198 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000b32:	f7ff fe15 	bl	8000760 <vPortExitCritical>
 8000b36:	e001      	b.n	8000b3c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d10a      	bne.n	8000b58 <xQueueGenericReset+0x110>
        __asm volatile
 8000b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b46:	f383 8811 	msr	BASEPRI, r3
 8000b4a:	f3bf 8f6f 	isb	sy
 8000b4e:	f3bf 8f4f 	dsb	sy
 8000b52:	60bb      	str	r3, [r7, #8]
    }
 8000b54:	bf00      	nop
 8000b56:	e7fe      	b.n	8000b56 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000b58:	697b      	ldr	r3, [r7, #20]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	e000ed04 	.word	0xe000ed04

08000b68 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af02      	add	r7, sp, #8
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	4613      	mov	r3, r2
 8000b74:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d02e      	beq.n	8000bde <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000b80:	2100      	movs	r1, #0
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	fba3 2302 	umull	r2, r3, r3, r2
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d000      	beq.n	8000b90 <xQueueGenericCreate+0x28>
 8000b8e:	2101      	movs	r1, #1
 8000b90:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d123      	bne.n	8000bde <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	68ba      	ldr	r2, [r7, #8]
 8000b9a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000b9e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000ba2:	d81c      	bhi.n	8000bde <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	fb02 f303 	mul.w	r3, r2, r3
 8000bac:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	3350      	adds	r3, #80	; 0x50
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff facc 	bl	8000150 <pvPortMalloc>
 8000bb8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d01c      	beq.n	8000bfa <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	3350      	adds	r3, #80	; 0x50
 8000bc8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000bca:	79fa      	ldrb	r2, [r7, #7]
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	697a      	ldr	r2, [r7, #20]
 8000bd4:	68b9      	ldr	r1, [r7, #8]
 8000bd6:	68f8      	ldr	r0, [r7, #12]
 8000bd8:	f000 f814 	bl	8000c04 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000bdc:	e00d      	b.n	8000bfa <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d10a      	bne.n	8000bfa <xQueueGenericCreate+0x92>
        __asm volatile
 8000be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000be8:	f383 8811 	msr	BASEPRI, r3
 8000bec:	f3bf 8f6f 	isb	sy
 8000bf0:	f3bf 8f4f 	dsb	sy
 8000bf4:	613b      	str	r3, [r7, #16]
    }
 8000bf6:	bf00      	nop
 8000bf8:	e7fe      	b.n	8000bf8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000bfa:	69fb      	ldr	r3, [r7, #28]
    }
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3720      	adds	r7, #32
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
 8000c10:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d103      	bne.n	8000c20 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	e002      	b.n	8000c26 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	68fa      	ldr	r2, [r7, #12]
 8000c2a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000c32:	2101      	movs	r1, #1
 8000c34:	69b8      	ldr	r0, [r7, #24]
 8000c36:	f7ff ff07 	bl	8000a48 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	78fa      	ldrb	r2, [r7, #3]
 8000c3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08c      	sub	sp, #48	; 0x30
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d10a      	bne.n	8000c7c <xQueueReceive+0x30>
        __asm volatile
 8000c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c6a:	f383 8811 	msr	BASEPRI, r3
 8000c6e:	f3bf 8f6f 	isb	sy
 8000c72:	f3bf 8f4f 	dsb	sy
 8000c76:	623b      	str	r3, [r7, #32]
    }
 8000c78:	bf00      	nop
 8000c7a:	e7fe      	b.n	8000c7a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d103      	bne.n	8000c8a <xQueueReceive+0x3e>
 8000c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <xQueueReceive+0x42>
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e000      	b.n	8000c90 <xQueueReceive+0x44>
 8000c8e:	2300      	movs	r3, #0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d10a      	bne.n	8000caa <xQueueReceive+0x5e>
        __asm volatile
 8000c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c98:	f383 8811 	msr	BASEPRI, r3
 8000c9c:	f3bf 8f6f 	isb	sy
 8000ca0:	f3bf 8f4f 	dsb	sy
 8000ca4:	61fb      	str	r3, [r7, #28]
    }
 8000ca6:	bf00      	nop
 8000ca8:	e7fe      	b.n	8000ca8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000caa:	f001 fbc1 	bl	8002430 <xTaskGetSchedulerState>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d102      	bne.n	8000cba <xQueueReceive+0x6e>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d101      	bne.n	8000cbe <xQueueReceive+0x72>
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e000      	b.n	8000cc0 <xQueueReceive+0x74>
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d10a      	bne.n	8000cda <xQueueReceive+0x8e>
        __asm volatile
 8000cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cc8:	f383 8811 	msr	BASEPRI, r3
 8000ccc:	f3bf 8f6f 	isb	sy
 8000cd0:	f3bf 8f4f 	dsb	sy
 8000cd4:	61bb      	str	r3, [r7, #24]
    }
 8000cd6:	bf00      	nop
 8000cd8:	e7fe      	b.n	8000cd8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000cda:	f7ff fd11 	bl	8000700 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d01f      	beq.n	8000d2a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000cea:	68b9      	ldr	r1, [r7, #8]
 8000cec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000cee:	f000 f88d 	bl	8000e0c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf4:	1e5a      	subs	r2, r3, #1
 8000cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfc:	691b      	ldr	r3, [r3, #16]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d00f      	beq.n	8000d22 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d04:	3310      	adds	r3, #16
 8000d06:	4618      	mov	r0, r3
 8000d08:	f001 f924 	bl	8001f54 <xTaskRemoveFromEventList>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d007      	beq.n	8000d22 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000d12:	4b3d      	ldr	r3, [pc, #244]	; (8000e08 <xQueueReceive+0x1bc>)
 8000d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	f3bf 8f4f 	dsb	sy
 8000d1e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000d22:	f7ff fd1d 	bl	8000760 <vPortExitCritical>
                return pdPASS;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e069      	b.n	8000dfe <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d103      	bne.n	8000d38 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000d30:	f7ff fd16 	bl	8000760 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000d34:	2300      	movs	r3, #0
 8000d36:	e062      	b.n	8000dfe <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d106      	bne.n	8000d4c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000d3e:	f107 0310 	add.w	r3, r7, #16
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 f9de 	bl	8002104 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000d4c:	f7ff fd08 	bl	8000760 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000d50:	f000 fd7a 	bl	8001848 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000d54:	f7ff fcd4 	bl	8000700 <vPortEnterCritical>
 8000d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d5e:	b25b      	sxtb	r3, r3
 8000d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d64:	d103      	bne.n	8000d6e <xQueueReceive+0x122>
 8000d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d74:	b25b      	sxtb	r3, r3
 8000d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d7a:	d103      	bne.n	8000d84 <xQueueReceive+0x138>
 8000d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000d84:	f7ff fcec 	bl	8000760 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000d88:	1d3a      	adds	r2, r7, #4
 8000d8a:	f107 0310 	add.w	r3, r7, #16
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f001 f9cd 	bl	8002130 <xTaskCheckForTimeOut>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d123      	bne.n	8000de4 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d9e:	f000 f8ad 	bl	8000efc <prvIsQueueEmpty>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d017      	beq.n	8000dd8 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000daa:	3324      	adds	r3, #36	; 0x24
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	4611      	mov	r1, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f001 f865 	bl	8001e80 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000db6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000db8:	f000 f84e 	bl	8000e58 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000dbc:	f000 fd88 	bl	80018d0 <xTaskResumeAll>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d189      	bne.n	8000cda <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <xQueueReceive+0x1bc>)
 8000dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	f3bf 8f4f 	dsb	sy
 8000dd2:	f3bf 8f6f 	isb	sy
 8000dd6:	e780      	b.n	8000cda <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000dd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000dda:	f000 f83d 	bl	8000e58 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000dde:	f000 fd77 	bl	80018d0 <xTaskResumeAll>
 8000de2:	e77a      	b.n	8000cda <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000de6:	f000 f837 	bl	8000e58 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000dea:	f000 fd71 	bl	80018d0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000dee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000df0:	f000 f884 	bl	8000efc <prvIsQueueEmpty>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f43f af6f 	beq.w	8000cda <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000dfc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3730      	adds	r7, #48	; 0x30
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	e000ed04 	.word	0xe000ed04

08000e0c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d018      	beq.n	8000e50 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68da      	ldr	r2, [r3, #12]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	441a      	add	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	68da      	ldr	r2, [r3, #12]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d303      	bcc.n	8000e40 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68d9      	ldr	r1, [r3, #12]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	461a      	mov	r2, r3
 8000e4a:	6838      	ldr	r0, [r7, #0]
 8000e4c:	f002 ff74 	bl	8003d38 <memcpy>
    }
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000e60:	f7ff fc4e 	bl	8000700 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e6a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000e6c:	e011      	b.n	8000e92 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d012      	beq.n	8000e9c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3324      	adds	r3, #36	; 0x24
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f001 f86a 	bl	8001f54 <xTaskRemoveFromEventList>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000e86:	f001 f9b9 	bl	80021fc <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	dce9      	bgt.n	8000e6e <prvUnlockQueue+0x16>
 8000e9a:	e000      	b.n	8000e9e <prvUnlockQueue+0x46>
                    break;
 8000e9c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	22ff      	movs	r2, #255	; 0xff
 8000ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000ea6:	f7ff fc5b 	bl	8000760 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000eaa:	f7ff fc29 	bl	8000700 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000eb4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000eb6:	e011      	b.n	8000edc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	691b      	ldr	r3, [r3, #16]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d012      	beq.n	8000ee6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3310      	adds	r3, #16
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f001 f845 	bl	8001f54 <xTaskRemoveFromEventList>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000ed0:	f001 f994 	bl	80021fc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000ed4:	7bbb      	ldrb	r3, [r7, #14]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000edc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	dce9      	bgt.n	8000eb8 <prvUnlockQueue+0x60>
 8000ee4:	e000      	b.n	8000ee8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000ee6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	22ff      	movs	r2, #255	; 0xff
 8000eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000ef0:	f7ff fc36 	bl	8000760 <vPortExitCritical>
}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000f04:	f7ff fbfc 	bl	8000700 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d102      	bne.n	8000f16 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000f10:	2301      	movs	r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	e001      	b.n	8000f1a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000f1a:	f7ff fc21 	bl	8000760 <vPortExitCritical>

    return xReturn;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000f28:	b480      	push	{r7}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d10a      	bne.n	8000f52 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8000f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f40:	f383 8811 	msr	BASEPRI, r3
 8000f44:	f3bf 8f6f 	isb	sy
 8000f48:	f3bf 8f4f 	dsb	sy
 8000f4c:	60fb      	str	r3, [r7, #12]
    }
 8000f4e:	bf00      	nop
 8000f50:	e7fe      	b.n	8000f50 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d024      	beq.n	8000fa2 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	e01e      	b.n	8000f9c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000f5e:	4a18      	ldr	r2, [pc, #96]	; (8000fc0 <vQueueAddToRegistry+0x98>)
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	4413      	add	r3, r2
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d105      	bne.n	8000f7a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	4a13      	ldr	r2, [pc, #76]	; (8000fc0 <vQueueAddToRegistry+0x98>)
 8000f74:	4413      	add	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
                    break;
 8000f78:	e013      	b.n	8000fa2 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d10a      	bne.n	8000f96 <vQueueAddToRegistry+0x6e>
 8000f80:	4a0f      	ldr	r2, [pc, #60]	; (8000fc0 <vQueueAddToRegistry+0x98>)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d104      	bne.n	8000f96 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <vQueueAddToRegistry+0x98>)
 8000f92:	4413      	add	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	2b07      	cmp	r3, #7
 8000fa0:	d9dd      	bls.n	8000f5e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d005      	beq.n	8000fb4 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8000fb4:	bf00      	nop
 8000fb6:	371c      	adds	r7, #28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	200001fc 	.word	0x200001fc

08000fc4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000fd4:	f7ff fb94 	bl	8000700 <vPortEnterCritical>
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000fde:	b25b      	sxtb	r3, r3
 8000fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe4:	d103      	bne.n	8000fee <vQueueWaitForMessageRestricted+0x2a>
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ffa:	d103      	bne.n	8001004 <vQueueWaitForMessageRestricted+0x40>
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001004:	f7ff fbac 	bl	8000760 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800100c:	2b00      	cmp	r3, #0
 800100e:	d106      	bne.n	800101e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	3324      	adds	r3, #36	; 0x24
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	68b9      	ldr	r1, [r7, #8]
 8001018:	4618      	mov	r0, r3
 800101a:	f000 ff55 	bl	8001ec8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800101e:	6978      	ldr	r0, [r7, #20]
 8001020:	f7ff ff1a 	bl	8000e58 <prvUnlockQueue>
    }
 8001024:	bf00      	nop
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_MspInit+0x5c>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	4a14      	ldr	r2, [pc, #80]	; (8001088 <HAL_MspInit+0x5c>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6193      	str	r3, [r2, #24]
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_MspInit+0x5c>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <HAL_MspInit+0x5c>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <HAL_MspInit+0x5c>)
 8001050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001054:	61d3      	str	r3, [r2, #28]
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <HAL_MspInit+0x5c>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_MspInit+0x60>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	4a04      	ldr	r2, [pc, #16]	; (800108c <HAL_MspInit+0x60>)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107e:	bf00      	nop
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	40021000 	.word	0x40021000
 800108c:	40010000 	.word	0x40010000

08001090 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08c      	sub	sp, #48	; 0x30
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	2019      	movs	r0, #25
 80010a6:	f001 fdde 	bl	8002c66 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80010aa:	2019      	movs	r0, #25
 80010ac:	f001 fdf7 	bl	8002c9e <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80010b0:	4b1e      	ldr	r3, [pc, #120]	; (800112c <HAL_InitTick+0x9c>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a1d      	ldr	r2, [pc, #116]	; (800112c <HAL_InitTick+0x9c>)
 80010b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b1b      	ldr	r3, [pc, #108]	; (800112c <HAL_InitTick+0x9c>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010c8:	f107 0210 	add.w	r2, r7, #16
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f002 fb6a 	bl	80037ac <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80010d8:	f002 fb54 	bl	8003784 <HAL_RCC_GetPCLK2Freq>
 80010dc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e0:	4a13      	ldr	r2, [pc, #76]	; (8001130 <HAL_InitTick+0xa0>)
 80010e2:	fba2 2303 	umull	r2, r3, r2, r3
 80010e6:	0c9b      	lsrs	r3, r3, #18
 80010e8:	3b01      	subs	r3, #1
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <HAL_InitTick+0xa4>)
 80010ee:	4a12      	ldr	r2, [pc, #72]	; (8001138 <HAL_InitTick+0xa8>)
 80010f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <HAL_InitTick+0xa4>)
 80010f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010f8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010fa:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <HAL_InitTick+0xa4>)
 80010fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010fe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <HAL_InitTick+0xa4>)
 8001102:	2200      	movs	r2, #0
 8001104:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <HAL_InitTick+0xa4>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800110c:	4809      	ldr	r0, [pc, #36]	; (8001134 <HAL_InitTick+0xa4>)
 800110e:	f002 fb9b 	bl	8003848 <HAL_TIM_Base_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d104      	bne.n	8001122 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001118:	4806      	ldr	r0, [pc, #24]	; (8001134 <HAL_InitTick+0xa4>)
 800111a:	f002 fbed 	bl	80038f8 <HAL_TIM_Base_Start_IT>
 800111e:	4603      	mov	r3, r0
 8001120:	e000      	b.n	8001124 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	3730      	adds	r7, #48	; 0x30
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40021000 	.word	0x40021000
 8001130:	431bde83 	.word	0x431bde83
 8001134:	2000023c 	.word	0x2000023c
 8001138:	40012c00 	.word	0x40012c00

0800113c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <NMI_Handler+0x4>

08001142 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <HardFault_Handler+0x4>

08001148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800114c:	e7fe      	b.n	800114c <MemManage_Handler+0x4>

0800114e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001152:	e7fe      	b.n	8001152 <BusFault_Handler+0x4>

08001154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001158:	e7fe      	b.n	8001158 <UsageFault_Handler+0x4>

0800115a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
	...

08001168 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <TIM1_UP_IRQHandler+0x10>)
 800116e:	f002 fc15 	bl	800399c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	2000023c 	.word	0x2000023c

0800117c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001184:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <_sbrk+0x5c>)
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <_sbrk+0x60>)
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d102      	bne.n	800119e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <_sbrk+0x64>)
 800119a:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <_sbrk+0x68>)
 800119c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <_sbrk+0x64>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d207      	bcs.n	80011bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011ac:	f002 fd8a 	bl	8003cc4 <__errno>
 80011b0:	4603      	mov	r3, r0
 80011b2:	220c      	movs	r2, #12
 80011b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	e009      	b.n	80011d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011c2:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <_sbrk+0x64>)
 80011cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ce:	68fb      	ldr	r3, [r7, #12]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20005000 	.word	0x20005000
 80011dc:	00000400 	.word	0x00000400
 80011e0:	200000a8 	.word	0x200000a8
 80011e4:	20000298 	.word	0x20000298

080011e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08c      	sub	sp, #48	; 0x30
 80011f8:	af04      	add	r7, sp, #16
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
 8001200:	603b      	str	r3, [r7, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4618      	mov	r0, r3
 8001208:	f7fe ffa2 	bl	8000150 <pvPortMalloc>
 800120c:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d013      	beq.n	800123c <xTaskCreate+0x48>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001214:	207c      	movs	r0, #124	; 0x7c
 8001216:	f7fe ff9b 	bl	8000150 <pvPortMalloc>
 800121a:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d008      	beq.n	8001234 <xTaskCreate+0x40>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001222:	227c      	movs	r2, #124	; 0x7c
 8001224:	2100      	movs	r1, #0
 8001226:	69f8      	ldr	r0, [r7, #28]
 8001228:	f002 fd94 	bl	8003d54 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	631a      	str	r2, [r3, #48]	; 0x30
 8001232:	e005      	b.n	8001240 <xTaskCreate+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001234:	6978      	ldr	r0, [r7, #20]
 8001236:	f7fe ff9d 	bl	8000174 <vPortFree>
 800123a:	e001      	b.n	8001240 <xTaskCreate+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d013      	beq.n	800126e <xTaskCreate+0x7a>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001246:	2300      	movs	r3, #0
 8001248:	9303      	str	r3, [sp, #12]
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	9302      	str	r3, [sp, #8]
 800124e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	68b9      	ldr	r1, [r7, #8]
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f000 f80e 	bl	800127e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001262:	69f8      	ldr	r0, [r7, #28]
 8001264:	f000 f89a 	bl	800139c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001268:	2301      	movs	r3, #1
 800126a:	61bb      	str	r3, [r7, #24]
 800126c:	e002      	b.n	8001274 <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
 8001272:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001274:	69bb      	ldr	r3, [r7, #24]
    }
 8001276:	4618      	mov	r0, r3
 8001278:	3720      	adds	r7, #32
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b088      	sub	sp, #32
 8001282:	af00      	add	r7, sp, #0
 8001284:	60f8      	str	r0, [r7, #12]
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
 800128a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800128c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800128e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	461a      	mov	r2, r3
 8001296:	21a5      	movs	r1, #165	; 0xa5
 8001298:	f002 fd5c 	bl	8003d54 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800129c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800129e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012a6:	3b01      	subs	r3, #1
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	f023 0307 	bic.w	r3, r3, #7
 80012b4:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	f003 0307 	and.w	r3, r3, #7
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d00a      	beq.n	80012d6 <prvInitialiseNewTask+0x58>
        __asm volatile
 80012c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012c4:	f383 8811 	msr	BASEPRI, r3
 80012c8:	f3bf 8f6f 	isb	sy
 80012cc:	f3bf 8f4f 	dsb	sy
 80012d0:	617b      	str	r3, [r7, #20]
    }
 80012d2:	bf00      	nop
 80012d4:	e7fe      	b.n	80012d4 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d01e      	beq.n	800131a <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
 80012e0:	e012      	b.n	8001308 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	4413      	add	r3, r2
 80012e8:	7819      	ldrb	r1, [r3, #0]
 80012ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	4413      	add	r3, r2
 80012f0:	3334      	adds	r3, #52	; 0x34
 80012f2:	460a      	mov	r2, r1
 80012f4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	4413      	add	r3, r2
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d006      	beq.n	8001310 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3301      	adds	r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	2b13      	cmp	r3, #19
 800130c:	d9e9      	bls.n	80012e2 <prvInitialiseNewTask+0x64>
 800130e:	e000      	b.n	8001312 <prvInitialiseNewTask+0x94>
            {
                break;
 8001310:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800131a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800131c:	2b04      	cmp	r3, #4
 800131e:	d90a      	bls.n	8001336 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8001320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001324:	f383 8811 	msr	BASEPRI, r3
 8001328:	f3bf 8f6f 	isb	sy
 800132c:	f3bf 8f4f 	dsb	sy
 8001330:	613b      	str	r3, [r7, #16]
    }
 8001332:	bf00      	nop
 8001334:	e7fe      	b.n	8001334 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001338:	2b04      	cmp	r3, #4
 800133a:	d901      	bls.n	8001340 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800133c:	2304      	movs	r3, #4
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001344:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800134a:	651a      	str	r2, [r3, #80]	; 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800134c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800134e:	3304      	adds	r3, #4
 8001350:	4618      	mov	r0, r3
 8001352:	f7fe ff40 	bl	80001d6 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001358:	3318      	adds	r3, #24
 800135a:	4618      	mov	r0, r3
 800135c:	f7fe ff3b 	bl	80001d6 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001364:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001368:	f1c3 0205 	rsb	r2, r3, #5
 800136c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800136e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001374:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	68f9      	ldr	r1, [r7, #12]
 800137a:	69b8      	ldr	r0, [r7, #24]
 800137c:	f7ff f8ca 	bl	8000514 <pxPortInitialiseStack>
 8001380:	4602      	mov	r2, r0
 8001382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001384:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001388:	2b00      	cmp	r3, #0
 800138a:	d002      	beq.n	8001392 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800138c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001390:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001392:	bf00      	nop
 8001394:	3720      	adds	r7, #32
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80013a4:	f7ff f9ac 	bl	8000700 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80013a8:	4b41      	ldr	r3, [pc, #260]	; (80014b0 <prvAddNewTaskToReadyList+0x114>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	3301      	adds	r3, #1
 80013ae:	4a40      	ldr	r2, [pc, #256]	; (80014b0 <prvAddNewTaskToReadyList+0x114>)
 80013b0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80013b2:	4b40      	ldr	r3, [pc, #256]	; (80014b4 <prvAddNewTaskToReadyList+0x118>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d109      	bne.n	80013ce <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80013ba:	4a3e      	ldr	r2, [pc, #248]	; (80014b4 <prvAddNewTaskToReadyList+0x118>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80013c0:	4b3b      	ldr	r3, [pc, #236]	; (80014b0 <prvAddNewTaskToReadyList+0x114>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d110      	bne.n	80013ea <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80013c8:	f000 ff9a 	bl	8002300 <prvInitialiseTaskLists>
 80013cc:	e00d      	b.n	80013ea <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80013ce:	4b3a      	ldr	r3, [pc, #232]	; (80014b8 <prvAddNewTaskToReadyList+0x11c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d109      	bne.n	80013ea <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80013d6:	4b37      	ldr	r3, [pc, #220]	; (80014b4 <prvAddNewTaskToReadyList+0x118>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d802      	bhi.n	80013ea <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80013e4:	4a33      	ldr	r2, [pc, #204]	; (80014b4 <prvAddNewTaskToReadyList+0x118>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80013ea:	4b34      	ldr	r3, [pc, #208]	; (80014bc <prvAddNewTaskToReadyList+0x120>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	3301      	adds	r3, #1
 80013f0:	4a32      	ldr	r2, [pc, #200]	; (80014bc <prvAddNewTaskToReadyList+0x120>)
 80013f2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80013f4:	4b31      	ldr	r3, [pc, #196]	; (80014bc <prvAddNewTaskToReadyList+0x120>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	649a      	str	r2, [r3, #72]	; 0x48
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001400:	4b2f      	ldr	r3, [pc, #188]	; (80014c0 <prvAddNewTaskToReadyList+0x124>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d903      	bls.n	8001410 <prvAddNewTaskToReadyList+0x74>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140c:	4a2c      	ldr	r2, [pc, #176]	; (80014c0 <prvAddNewTaskToReadyList+0x124>)
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001414:	492b      	ldr	r1, [pc, #172]	; (80014c4 <prvAddNewTaskToReadyList+0x128>)
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	440b      	add	r3, r1
 8001420:	3304      	adds	r3, #4
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	3204      	adds	r2, #4
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	1d1a      	adds	r2, r3, #4
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4a1c      	ldr	r2, [pc, #112]	; (80014c4 <prvAddNewTaskToReadyList+0x128>)
 8001454:	441a      	add	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	615a      	str	r2, [r3, #20]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800145e:	4919      	ldr	r1, [pc, #100]	; (80014c4 <prvAddNewTaskToReadyList+0x128>)
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	1c59      	adds	r1, r3, #1
 800146e:	4815      	ldr	r0, [pc, #84]	; (80014c4 <prvAddNewTaskToReadyList+0x128>)
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4403      	add	r3, r0
 800147a:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800147c:	f7ff f970 	bl	8000760 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001480:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <prvAddNewTaskToReadyList+0x11c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00e      	beq.n	80014a6 <prvAddNewTaskToReadyList+0x10a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001488:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <prvAddNewTaskToReadyList+0x118>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001492:	429a      	cmp	r2, r3
 8001494:	d207      	bcs.n	80014a6 <prvAddNewTaskToReadyList+0x10a>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <prvAddNewTaskToReadyList+0x12c>)
 8001498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	f3bf 8f4f 	dsb	sy
 80014a2:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000184 	.word	0x20000184
 80014b4:	200000ac 	.word	0x200000ac
 80014b8:	20000190 	.word	0x20000190
 80014bc:	200001a0 	.word	0x200001a0
 80014c0:	2000018c 	.word	0x2000018c
 80014c4:	200000b0 	.word	0x200000b0
 80014c8:	e000ed04 	.word	0xe000ed04

080014cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d017      	beq.n	800150e <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <vTaskDelay+0x60>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00a      	beq.n	80014fc <vTaskDelay+0x30>
        __asm volatile
 80014e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014ea:	f383 8811 	msr	BASEPRI, r3
 80014ee:	f3bf 8f6f 	isb	sy
 80014f2:	f3bf 8f4f 	dsb	sy
 80014f6:	60bb      	str	r3, [r7, #8]
    }
 80014f8:	bf00      	nop
 80014fa:	e7fe      	b.n	80014fa <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80014fc:	f000 f9a4 	bl	8001848 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001500:	2100      	movs	r1, #0
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 ffb2 	bl	800246c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001508:	f000 f9e2 	bl	80018d0 <xTaskResumeAll>
 800150c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d107      	bne.n	8001524 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <vTaskDelay+0x64>)
 8001516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	f3bf 8f4f 	dsb	sy
 8001520:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	200001ac 	.word	0x200001ac
 8001530:	e000ed04 	.word	0xe000ed04

08001534 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 800153c:	f7ff f8e0 	bl	8000700 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d102      	bne.n	800154c <vTaskSuspend+0x18>
 8001546:	4b36      	ldr	r3, [pc, #216]	; (8001620 <vTaskSuspend+0xec>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	e000      	b.n	800154e <vTaskSuspend+0x1a>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	3304      	adds	r3, #4
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe fea5 	bl	80002a4 <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155e:	2b00      	cmp	r3, #0
 8001560:	d004      	beq.n	800156c <vTaskSuspend+0x38>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	3318      	adds	r3, #24
 8001566:	4618      	mov	r0, r3
 8001568:	f7fe fe9c 	bl	80002a4 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	3304      	adds	r3, #4
 8001570:	4619      	mov	r1, r3
 8001572:	482c      	ldr	r0, [pc, #176]	; (8001624 <vTaskSuspend+0xf0>)
 8001574:	f7fe fe3b 	bl	80001ee <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	e010      	b.n	80015a0 <vTaskSuspend+0x6c>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	4413      	add	r3, r2
 8001584:	3378      	adds	r3, #120	; 0x78
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b01      	cmp	r3, #1
 800158c:	d105      	bne.n	800159a <vTaskSuspend+0x66>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	4413      	add	r3, r2
 8001594:	3378      	adds	r3, #120	; 0x78
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3301      	adds	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	ddeb      	ble.n	800157e <vTaskSuspend+0x4a>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 80015a6:	f7ff f8db 	bl	8000760 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80015aa:	4b1f      	ldr	r3, [pc, #124]	; (8001628 <vTaskSuspend+0xf4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d005      	beq.n	80015be <vTaskSuspend+0x8a>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 80015b2:	f7ff f8a5 	bl	8000700 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 80015b6:	f000 ff21 	bl	80023fc <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 80015ba:	f7ff f8d1 	bl	8000760 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <vTaskSuspend+0xec>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d127      	bne.n	8001618 <vTaskSuspend+0xe4>
        {
            if( xSchedulerRunning != pdFALSE )
 80015c8:	4b17      	ldr	r3, [pc, #92]	; (8001628 <vTaskSuspend+0xf4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d017      	beq.n	8001600 <vTaskSuspend+0xcc>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 80015d0:	4b16      	ldr	r3, [pc, #88]	; (800162c <vTaskSuspend+0xf8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d00a      	beq.n	80015ee <vTaskSuspend+0xba>
        __asm volatile
 80015d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015dc:	f383 8811 	msr	BASEPRI, r3
 80015e0:	f3bf 8f6f 	isb	sy
 80015e4:	f3bf 8f4f 	dsb	sy
 80015e8:	60fb      	str	r3, [r7, #12]
    }
 80015ea:	bf00      	nop
 80015ec:	e7fe      	b.n	80015ec <vTaskSuspend+0xb8>
                portYIELD_WITHIN_API();
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <vTaskSuspend+0xfc>)
 80015f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	f3bf 8f4f 	dsb	sy
 80015fa:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80015fe:	e00b      	b.n	8001618 <vTaskSuspend+0xe4>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <vTaskSuspend+0xf0>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <vTaskSuspend+0x100>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d103      	bne.n	8001614 <vTaskSuspend+0xe0>
                    pxCurrentTCB = NULL;
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <vTaskSuspend+0xec>)
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
    }
 8001612:	e001      	b.n	8001618 <vTaskSuspend+0xe4>
                    vTaskSwitchContext();
 8001614:	f000 fbd8 	bl	8001dc8 <vTaskSwitchContext>
    }
 8001618:	bf00      	nop
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	200000ac 	.word	0x200000ac
 8001624:	20000170 	.word	0x20000170
 8001628:	20000190 	.word	0x20000190
 800162c:	200001ac 	.word	0x200001ac
 8001630:	e000ed04 	.word	0xe000ed04
 8001634:	20000184 	.word	0x20000184

08001638 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8001638:	b480      	push	{r7}
 800163a:	b087      	sub	sp, #28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10a      	bne.n	8001664 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 800164e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001652:	f383 8811 	msr	BASEPRI, r3
 8001656:	f3bf 8f6f 	isb	sy
 800165a:	f3bf 8f4f 	dsb	sy
 800165e:	60fb      	str	r3, [r7, #12]
    }
 8001660:	bf00      	nop
 8001662:	e7fe      	b.n	8001662 <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	4a09      	ldr	r2, [pc, #36]	; (8001690 <prvTaskIsTaskSuspended+0x58>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d10a      	bne.n	8001684 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	4a08      	ldr	r2, [pc, #32]	; (8001694 <prvTaskIsTaskSuspended+0x5c>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d005      	beq.n	8001684 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	2b00      	cmp	r3, #0
 800167e:	d101      	bne.n	8001684 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 8001680:	2301      	movs	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001684:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8001686:	4618      	mov	r0, r3
 8001688:	371c      	adds	r7, #28
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	20000170 	.word	0x20000170
 8001694:	20000144 	.word	0x20000144

08001698 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	617b      	str	r3, [r7, #20]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10a      	bne.n	80016c0 <vTaskResume+0x28>
        __asm volatile
 80016aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ae:	f383 8811 	msr	BASEPRI, r3
 80016b2:	f3bf 8f6f 	isb	sy
 80016b6:	f3bf 8f4f 	dsb	sy
 80016ba:	60fb      	str	r3, [r7, #12]
    }
 80016bc:	bf00      	nop
 80016be:	e7fe      	b.n	80016be <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80016c0:	4b34      	ldr	r3, [pc, #208]	; (8001794 <vTaskResume+0xfc>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d060      	beq.n	800178c <vTaskResume+0xf4>
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d05d      	beq.n	800178c <vTaskResume+0xf4>
        {
            taskENTER_CRITICAL();
 80016d0:	f7ff f816 	bl	8000700 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80016d4:	6978      	ldr	r0, [r7, #20]
 80016d6:	f7ff ffaf 	bl	8001638 <prvTaskIsTaskSuspended>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d053      	beq.n	8001788 <vTaskResume+0xf0>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	3304      	adds	r3, #4
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe fddd 	bl	80002a4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ee:	4b2a      	ldr	r3, [pc, #168]	; (8001798 <vTaskResume+0x100>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d903      	bls.n	80016fe <vTaskResume+0x66>
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fa:	4a27      	ldr	r2, [pc, #156]	; (8001798 <vTaskResume+0x100>)
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001702:	4926      	ldr	r1, [pc, #152]	; (800179c <vTaskResume+0x104>)
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	3304      	adds	r3, #4
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	3204      	adds	r2, #4
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	1d1a      	adds	r2, r3, #4
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4a16      	ldr	r2, [pc, #88]	; (800179c <vTaskResume+0x104>)
 8001742:	441a      	add	r2, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	615a      	str	r2, [r3, #20]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800174c:	4913      	ldr	r1, [pc, #76]	; (800179c <vTaskResume+0x104>)
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	440b      	add	r3, r1
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	1c59      	adds	r1, r3, #1
 800175c:	480f      	ldr	r0, [pc, #60]	; (800179c <vTaskResume+0x104>)
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4403      	add	r3, r0
 8001768:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <vTaskResume+0xfc>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001774:	429a      	cmp	r2, r3
 8001776:	d307      	bcc.n	8001788 <vTaskResume+0xf0>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 8001778:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <vTaskResume+0x108>)
 800177a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	f3bf 8f4f 	dsb	sy
 8001784:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8001788:	f7fe ffea 	bl	8000760 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800178c:	bf00      	nop
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	200000ac 	.word	0x200000ac
 8001798:	2000018c 	.word	0x2000018c
 800179c:	200000b0 	.word	0x200000b0
 80017a0:	e000ed04 	.word	0xe000ed04

080017a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80017aa:	4b20      	ldr	r3, [pc, #128]	; (800182c <vTaskStartScheduler+0x88>)
 80017ac:	9301      	str	r3, [sp, #4]
 80017ae:	2300      	movs	r3, #0
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	2300      	movs	r3, #0
 80017b4:	2280      	movs	r2, #128	; 0x80
 80017b6:	491e      	ldr	r1, [pc, #120]	; (8001830 <vTaskStartScheduler+0x8c>)
 80017b8:	481e      	ldr	r0, [pc, #120]	; (8001834 <vTaskStartScheduler+0x90>)
 80017ba:	f7ff fd1b 	bl	80011f4 <xTaskCreate>
 80017be:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d102      	bne.n	80017cc <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80017c6:	f000 febf 	bl	8002548 <xTimerCreateTimerTask>
 80017ca:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d116      	bne.n	8001800 <vTaskStartScheduler+0x5c>
        __asm volatile
 80017d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017d6:	f383 8811 	msr	BASEPRI, r3
 80017da:	f3bf 8f6f 	isb	sy
 80017de:	f3bf 8f4f 	dsb	sy
 80017e2:	60bb      	str	r3, [r7, #8]
    }
 80017e4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80017e6:	4b14      	ldr	r3, [pc, #80]	; (8001838 <vTaskStartScheduler+0x94>)
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ec:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80017ee:	4b13      	ldr	r3, [pc, #76]	; (800183c <vTaskStartScheduler+0x98>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <vTaskStartScheduler+0x9c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80017fa:	f7fe ff0f 	bl	800061c <xPortStartScheduler>
 80017fe:	e00e      	b.n	800181e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001806:	d10a      	bne.n	800181e <vTaskStartScheduler+0x7a>
        __asm volatile
 8001808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800180c:	f383 8811 	msr	BASEPRI, r3
 8001810:	f3bf 8f6f 	isb	sy
 8001814:	f3bf 8f4f 	dsb	sy
 8001818:	607b      	str	r3, [r7, #4]
    }
 800181a:	bf00      	nop
 800181c:	e7fe      	b.n	800181c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <vTaskStartScheduler+0xa0>)
 8001820:	681b      	ldr	r3, [r3, #0]
}
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200001a8 	.word	0x200001a8
 8001830:	08003f08 	.word	0x08003f08
 8001834:	08002215 	.word	0x08002215
 8001838:	200001a4 	.word	0x200001a4
 800183c:	20000190 	.word	0x20000190
 8001840:	20000188 	.word	0x20000188
 8001844:	20000008 	.word	0x20000008

08001848 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <vTaskSuspendAll+0x18>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	3301      	adds	r3, #1
 8001852:	4a03      	ldr	r2, [pc, #12]	; (8001860 <vTaskSuspendAll+0x18>)
 8001854:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	200001ac 	.word	0x200001ac

08001864 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

    static TickType_t prvGetExpectedIdleTime( void )
    {
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
        TickType_t xReturn;
        UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800186a:	2300      	movs	r3, #0
 800186c:	603b      	str	r3, [r7, #0]
         * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
         * task that are in the Ready state, even though the idle task is
         * running. */
        #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
        {
            if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800186e:	4b13      	ldr	r3, [pc, #76]	; (80018bc <prvGetExpectedIdleTime+0x58>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <prvGetExpectedIdleTime+0x16>
            {
                uxHigherPriorityReadyTasks = pdTRUE;
 8001876:	2301      	movs	r3, #1
 8001878:	603b      	str	r3, [r7, #0]
                uxHigherPriorityReadyTasks = pdTRUE;
            }
        }
        #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */

        if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <prvGetExpectedIdleTime+0x5c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001880:	2b00      	cmp	r3, #0
 8001882:	d002      	beq.n	800188a <prvGetExpectedIdleTime+0x26>
        {
            xReturn = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	e012      	b.n	80018b0 <prvGetExpectedIdleTime+0x4c>
        }
        else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <prvGetExpectedIdleTime+0x60>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d902      	bls.n	8001898 <prvGetExpectedIdleTime+0x34>
        {
            /* There are other idle priority tasks in the ready state.  If
             * time slicing is used then the very next tick interrupt must be
             * processed. */
            xReturn = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	e00b      	b.n	80018b0 <prvGetExpectedIdleTime+0x4c>
        }
        else if( uxHigherPriorityReadyTasks != pdFALSE )
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <prvGetExpectedIdleTime+0x40>
        {
            /* There are tasks in the Ready state that have a priority above the
             * idle priority.  This path can only be reached if
             * configUSE_PREEMPTION is 0. */
            xReturn = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	e005      	b.n	80018b0 <prvGetExpectedIdleTime+0x4c>
        }
        else
        {
            xReturn = xNextTaskUnblockTime - xTickCount;
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <prvGetExpectedIdleTime+0x64>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <prvGetExpectedIdleTime+0x68>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	607b      	str	r3, [r7, #4]
        }

        return xReturn;
 80018b0:	687b      	ldr	r3, [r7, #4]
    }
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	2000018c 	.word	0x2000018c
 80018c0:	200000ac 	.word	0x200000ac
 80018c4:	200000b0 	.word	0x200000b0
 80018c8:	200001a4 	.word	0x200001a4
 80018cc:	20000188 	.word	0x20000188

080018d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80018da:	2300      	movs	r3, #0
 80018dc:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80018de:	4b71      	ldr	r3, [pc, #452]	; (8001aa4 <xTaskResumeAll+0x1d4>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10a      	bne.n	80018fc <xTaskResumeAll+0x2c>
        __asm volatile
 80018e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ea:	f383 8811 	msr	BASEPRI, r3
 80018ee:	f3bf 8f6f 	isb	sy
 80018f2:	f3bf 8f4f 	dsb	sy
 80018f6:	607b      	str	r3, [r7, #4]
    }
 80018f8:	bf00      	nop
 80018fa:	e7fe      	b.n	80018fa <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80018fc:	f7fe ff00 	bl	8000700 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001900:	4b68      	ldr	r3, [pc, #416]	; (8001aa4 <xTaskResumeAll+0x1d4>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	3b01      	subs	r3, #1
 8001906:	4a67      	ldr	r2, [pc, #412]	; (8001aa4 <xTaskResumeAll+0x1d4>)
 8001908:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800190a:	4b66      	ldr	r3, [pc, #408]	; (8001aa4 <xTaskResumeAll+0x1d4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	f040 80c1 	bne.w	8001a96 <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001914:	4b64      	ldr	r3, [pc, #400]	; (8001aa8 <xTaskResumeAll+0x1d8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 80bc 	beq.w	8001a96 <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800191e:	e08b      	b.n	8001a38 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001920:	4b62      	ldr	r3, [pc, #392]	; (8001aac <xTaskResumeAll+0x1dc>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	6a12      	ldr	r2, [r2, #32]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	69fa      	ldr	r2, [r7, #28]
 800193e:	69d2      	ldr	r2, [r2, #28]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3318      	adds	r3, #24
 800194a:	429a      	cmp	r2, r3
 800194c:	d103      	bne.n	8001956 <xTaskResumeAll+0x86>
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	6a1a      	ldr	r2, [r3, #32]
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	2200      	movs	r2, #0
 800195a:	629a      	str	r2, [r3, #40]	; 0x28
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	1e5a      	subs	r2, r3, #1
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	68d2      	ldr	r2, [r2, #12]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	69fa      	ldr	r2, [r7, #28]
 800197c:	6892      	ldr	r2, [r2, #8]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	3304      	adds	r3, #4
 8001988:	429a      	cmp	r2, r3
 800198a:	d103      	bne.n	8001994 <xTaskResumeAll+0xc4>
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	2200      	movs	r2, #0
 8001998:	615a      	str	r2, [r3, #20]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	1e5a      	subs	r2, r3, #1
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a8:	4b41      	ldr	r3, [pc, #260]	; (8001ab0 <xTaskResumeAll+0x1e0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d903      	bls.n	80019b8 <xTaskResumeAll+0xe8>
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b4:	4a3e      	ldr	r2, [pc, #248]	; (8001ab0 <xTaskResumeAll+0x1e0>)
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019bc:	493d      	ldr	r1, [pc, #244]	; (8001ab4 <xTaskResumeAll+0x1e4>)
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	440b      	add	r3, r1
 80019c8:	3304      	adds	r3, #4
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	60da      	str	r2, [r3, #12]
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	69fa      	ldr	r2, [r7, #28]
 80019e2:	3204      	adds	r2, #4
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	1d1a      	adds	r2, r3, #4
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4a2e      	ldr	r2, [pc, #184]	; (8001ab4 <xTaskResumeAll+0x1e4>)
 80019fc:	441a      	add	r2, r3
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	615a      	str	r2, [r3, #20]
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a06:	492b      	ldr	r1, [pc, #172]	; (8001ab4 <xTaskResumeAll+0x1e4>)
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	1c59      	adds	r1, r3, #1
 8001a16:	4827      	ldr	r0, [pc, #156]	; (8001ab4 <xTaskResumeAll+0x1e4>)
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4403      	add	r3, r0
 8001a22:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a28:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <xTaskResumeAll+0x1e8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d302      	bcc.n	8001a38 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8001a32:	4b22      	ldr	r3, [pc, #136]	; (8001abc <xTaskResumeAll+0x1ec>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a38:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <xTaskResumeAll+0x1dc>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f47f af6f 	bne.w	8001920 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001a48:	f000 fcd8 	bl	80023fc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001a4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <xTaskResumeAll+0x1f0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d010      	beq.n	8001a7a <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001a58:	f000 f89e 	bl	8001b98 <xTaskIncrementTick>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d002      	beq.n	8001a68 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <xTaskResumeAll+0x1ec>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1f1      	bne.n	8001a58 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <xTaskResumeAll+0x1f0>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <xTaskResumeAll+0x1ec>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d009      	beq.n	8001a96 <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001a82:	2301      	movs	r3, #1
 8001a84:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001a86:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <xTaskResumeAll+0x1f4>)
 8001a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	f3bf 8f4f 	dsb	sy
 8001a92:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001a96:	f7fe fe63 	bl	8000760 <vPortExitCritical>

    return xAlreadyYielded;
 8001a9a:	69bb      	ldr	r3, [r7, #24]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3720      	adds	r7, #32
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	200001ac 	.word	0x200001ac
 8001aa8:	20000184 	.word	0x20000184
 8001aac:	20000144 	.word	0x20000144
 8001ab0:	2000018c 	.word	0x2000018c
 8001ab4:	200000b0 	.word	0x200000b0
 8001ab8:	200000ac 	.word	0x200000ac
 8001abc:	20000198 	.word	0x20000198
 8001ac0:	20000194 	.word	0x20000194
 8001ac4:	e000ed04 	.word	0xe000ed04

08001ac8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001ace:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <xTaskGetTickCount+0x18>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001ad4:	687b      	ldr	r3, [r7, #4]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr
 8001ae0:	20000188 	.word	0x20000188

08001ae4 <vTaskStepTick>:
 * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
 * 1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

    void vTaskStepTick( TickType_t xTicksToJump )
    {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
        /* Correct the tick count value after a period during which the tick
         * was suppressed.  Note this does *not* call the tick hook function for
         * each stepped tick. */
        configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8001aec:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <vTaskStepTick+0xa4>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	441a      	add	r2, r3
 8001af4:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <vTaskStepTick+0xa8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d90a      	bls.n	8001b12 <vTaskStepTick+0x2e>
        __asm volatile
 8001afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b00:	f383 8811 	msr	BASEPRI, r3
 8001b04:	f3bf 8f6f 	isb	sy
 8001b08:	f3bf 8f4f 	dsb	sy
 8001b0c:	617b      	str	r3, [r7, #20]
    }
 8001b0e:	bf00      	nop
 8001b10:	e7fe      	b.n	8001b10 <vTaskStepTick+0x2c>

        if( ( xTickCount + xTicksToJump ) == xNextTaskUnblockTime )
 8001b12:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <vTaskStepTick+0xa4>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	441a      	add	r2, r3
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <vTaskStepTick+0xa8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d128      	bne.n	8001b74 <vTaskStepTick+0x90>
        {
            /* Arrange for xTickCount to reach xNextTaskUnblockTime in
             * xTaskIncrementTick() when the scheduler resumes.  This ensures
             * that any delayed tasks are resumed at the correct time. */
            configASSERT( uxSchedulerSuspended );
 8001b22:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <vTaskStepTick+0xac>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10a      	bne.n	8001b40 <vTaskStepTick+0x5c>
        __asm volatile
 8001b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b2e:	f383 8811 	msr	BASEPRI, r3
 8001b32:	f3bf 8f6f 	isb	sy
 8001b36:	f3bf 8f4f 	dsb	sy
 8001b3a:	613b      	str	r3, [r7, #16]
    }
 8001b3c:	bf00      	nop
 8001b3e:	e7fe      	b.n	8001b3e <vTaskStepTick+0x5a>
            configASSERT( xTicksToJump != ( TickType_t ) 0 );
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10a      	bne.n	8001b5c <vTaskStepTick+0x78>
        __asm volatile
 8001b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b4a:	f383 8811 	msr	BASEPRI, r3
 8001b4e:	f3bf 8f6f 	isb	sy
 8001b52:	f3bf 8f4f 	dsb	sy
 8001b56:	60fb      	str	r3, [r7, #12]
    }
 8001b58:	bf00      	nop
 8001b5a:	e7fe      	b.n	8001b5a <vTaskStepTick+0x76>

            /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
            taskENTER_CRITICAL();
 8001b5c:	f7fe fdd0 	bl	8000700 <vPortEnterCritical>
            {
                xPendedTicks++;
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <vTaskStepTick+0xb0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	3301      	adds	r3, #1
 8001b66:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <vTaskStepTick+0xb0>)
 8001b68:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8001b6a:	f7fe fdf9 	bl	8000760 <vPortExitCritical>
            xTicksToJump--;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	3b01      	subs	r3, #1
 8001b72:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        xTickCount += xTicksToJump;
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <vTaskStepTick+0xa4>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	4a02      	ldr	r2, [pc, #8]	; (8001b88 <vTaskStepTick+0xa4>)
 8001b7e:	6013      	str	r3, [r2, #0]
        traceINCREASE_TICK_COUNT( xTicksToJump );
    }
 8001b80:	bf00      	nop
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000188 	.word	0x20000188
 8001b8c:	200001a4 	.word	0x200001a4
 8001b90:	200001ac 	.word	0x200001ac
 8001b94:	20000194 	.word	0x20000194

08001b98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	; 0x28
 8001b9c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ba2:	4b7e      	ldr	r3, [pc, #504]	; (8001d9c <xTaskIncrementTick+0x204>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f040 80ed 	bne.w	8001d86 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001bac:	4b7c      	ldr	r3, [pc, #496]	; (8001da0 <xTaskIncrementTick+0x208>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001bb4:	4a7a      	ldr	r2, [pc, #488]	; (8001da0 <xTaskIncrementTick+0x208>)
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d120      	bne.n	8001c02 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001bc0:	4b78      	ldr	r3, [pc, #480]	; (8001da4 <xTaskIncrementTick+0x20c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00a      	beq.n	8001be0 <xTaskIncrementTick+0x48>
        __asm volatile
 8001bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bce:	f383 8811 	msr	BASEPRI, r3
 8001bd2:	f3bf 8f6f 	isb	sy
 8001bd6:	f3bf 8f4f 	dsb	sy
 8001bda:	607b      	str	r3, [r7, #4]
    }
 8001bdc:	bf00      	nop
 8001bde:	e7fe      	b.n	8001bde <xTaskIncrementTick+0x46>
 8001be0:	4b70      	ldr	r3, [pc, #448]	; (8001da4 <xTaskIncrementTick+0x20c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	61fb      	str	r3, [r7, #28]
 8001be6:	4b70      	ldr	r3, [pc, #448]	; (8001da8 <xTaskIncrementTick+0x210>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a6e      	ldr	r2, [pc, #440]	; (8001da4 <xTaskIncrementTick+0x20c>)
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4a6e      	ldr	r2, [pc, #440]	; (8001da8 <xTaskIncrementTick+0x210>)
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b6d      	ldr	r3, [pc, #436]	; (8001dac <xTaskIncrementTick+0x214>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	4a6c      	ldr	r2, [pc, #432]	; (8001dac <xTaskIncrementTick+0x214>)
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	f000 fbfd 	bl	80023fc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001c02:	4b6b      	ldr	r3, [pc, #428]	; (8001db0 <xTaskIncrementTick+0x218>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6a3a      	ldr	r2, [r7, #32]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	f0c0 80a7 	bcc.w	8001d5c <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c0e:	4b65      	ldr	r3, [pc, #404]	; (8001da4 <xTaskIncrementTick+0x20c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d104      	bne.n	8001c22 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c18:	4b65      	ldr	r3, [pc, #404]	; (8001db0 <xTaskIncrementTick+0x218>)
 8001c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1e:	601a      	str	r2, [r3, #0]
                    break;
 8001c20:	e09c      	b.n	8001d5c <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c22:	4b60      	ldr	r3, [pc, #384]	; (8001da4 <xTaskIncrementTick+0x20c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001c32:	6a3a      	ldr	r2, [r7, #32]
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d203      	bcs.n	8001c42 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001c3a:	4a5d      	ldr	r2, [pc, #372]	; (8001db0 <xTaskIncrementTick+0x218>)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001c40:	e08c      	b.n	8001d5c <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	68d2      	ldr	r2, [r2, #12]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	6892      	ldr	r2, [r2, #8]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	3304      	adds	r3, #4
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d103      	bne.n	8001c70 <xTaskIncrementTick+0xd8>
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	2200      	movs	r2, #0
 8001c74:	615a      	str	r2, [r3, #20]
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	1e5a      	subs	r2, r3, #1
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d01e      	beq.n	8001cc6 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	6a12      	ldr	r2, [r2, #32]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	69d2      	ldr	r2, [r2, #28]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	3318      	adds	r3, #24
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d103      	bne.n	8001cb6 <xTaskIncrementTick+0x11e>
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	6a1a      	ldr	r2, [r3, #32]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	629a      	str	r2, [r3, #40]	; 0x28
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	1e5a      	subs	r2, r3, #1
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cca:	4b3a      	ldr	r3, [pc, #232]	; (8001db4 <xTaskIncrementTick+0x21c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d903      	bls.n	8001cda <xTaskIncrementTick+0x142>
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd6:	4a37      	ldr	r2, [pc, #220]	; (8001db4 <xTaskIncrementTick+0x21c>)
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cde:	4936      	ldr	r1, [pc, #216]	; (8001db8 <xTaskIncrementTick+0x220>)
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	3304      	adds	r3, #4
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	3204      	adds	r2, #4
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	1d1a      	adds	r2, r3, #4
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4a26      	ldr	r2, [pc, #152]	; (8001db8 <xTaskIncrementTick+0x220>)
 8001d1e:	441a      	add	r2, r3
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	615a      	str	r2, [r3, #20]
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d28:	4923      	ldr	r1, [pc, #140]	; (8001db8 <xTaskIncrementTick+0x220>)
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	440b      	add	r3, r1
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	1c59      	adds	r1, r3, #1
 8001d38:	481f      	ldr	r0, [pc, #124]	; (8001db8 <xTaskIncrementTick+0x220>)
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4403      	add	r3, r0
 8001d44:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d4a:	4b1c      	ldr	r3, [pc, #112]	; (8001dbc <xTaskIncrementTick+0x224>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d50:	429a      	cmp	r2, r3
 8001d52:	f67f af5c 	bls.w	8001c0e <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8001d56:	2301      	movs	r3, #1
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d5a:	e758      	b.n	8001c0e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001d5c:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <xTaskIncrementTick+0x224>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d62:	4915      	ldr	r1, [pc, #84]	; (8001db8 <xTaskIncrementTick+0x220>)
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d901      	bls.n	8001d78 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8001d74:	2301      	movs	r3, #1
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <xTaskIncrementTick+0x228>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d007      	beq.n	8001d90 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8001d80:	2301      	movs	r3, #1
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
 8001d84:	e004      	b.n	8001d90 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001d86:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <xTaskIncrementTick+0x22c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	4a0d      	ldr	r2, [pc, #52]	; (8001dc4 <xTaskIncrementTick+0x22c>)
 8001d8e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3728      	adds	r7, #40	; 0x28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200001ac 	.word	0x200001ac
 8001da0:	20000188 	.word	0x20000188
 8001da4:	2000013c 	.word	0x2000013c
 8001da8:	20000140 	.word	0x20000140
 8001dac:	2000019c 	.word	0x2000019c
 8001db0:	200001a4 	.word	0x200001a4
 8001db4:	2000018c 	.word	0x2000018c
 8001db8:	200000b0 	.word	0x200000b0
 8001dbc:	200000ac 	.word	0x200000ac
 8001dc0:	20000198 	.word	0x20000198
 8001dc4:	20000194 	.word	0x20000194

08001dc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001dce:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <vTaskSwitchContext+0xa4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001dd6:	4b26      	ldr	r3, [pc, #152]	; (8001e70 <vTaskSwitchContext+0xa8>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001ddc:	e041      	b.n	8001e62 <vTaskSwitchContext+0x9a>
        xYieldPending = pdFALSE;
 8001dde:	4b24      	ldr	r3, [pc, #144]	; (8001e70 <vTaskSwitchContext+0xa8>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001de4:	4b23      	ldr	r3, [pc, #140]	; (8001e74 <vTaskSwitchContext+0xac>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	e010      	b.n	8001e0e <vTaskSwitchContext+0x46>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10a      	bne.n	8001e08 <vTaskSwitchContext+0x40>
        __asm volatile
 8001df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df6:	f383 8811 	msr	BASEPRI, r3
 8001dfa:	f3bf 8f6f 	isb	sy
 8001dfe:	f3bf 8f4f 	dsb	sy
 8001e02:	607b      	str	r3, [r7, #4]
    }
 8001e04:	bf00      	nop
 8001e06:	e7fe      	b.n	8001e06 <vTaskSwitchContext+0x3e>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	491a      	ldr	r1, [pc, #104]	; (8001e78 <vTaskSwitchContext+0xb0>)
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	4613      	mov	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0e4      	beq.n	8001dec <vTaskSwitchContext+0x24>
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4a12      	ldr	r2, [pc, #72]	; (8001e78 <vTaskSwitchContext+0xb0>)
 8001e2e:	4413      	add	r3, r2
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	3308      	adds	r3, #8
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d104      	bne.n	8001e52 <vTaskSwitchContext+0x8a>
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	4a08      	ldr	r2, [pc, #32]	; (8001e7c <vTaskSwitchContext+0xb4>)
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	4a05      	ldr	r2, [pc, #20]	; (8001e74 <vTaskSwitchContext+0xac>)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6013      	str	r3, [r2, #0]
}
 8001e62:	bf00      	nop
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr
 8001e6c:	200001ac 	.word	0x200001ac
 8001e70:	20000198 	.word	0x20000198
 8001e74:	2000018c 	.word	0x2000018c
 8001e78:	200000b0 	.word	0x200000b0
 8001e7c:	200000ac 	.word	0x200000ac

08001e80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10a      	bne.n	8001ea6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e94:	f383 8811 	msr	BASEPRI, r3
 8001e98:	f3bf 8f6f 	isb	sy
 8001e9c:	f3bf 8f4f 	dsb	sy
 8001ea0:	60fb      	str	r3, [r7, #12]
    }
 8001ea2:	bf00      	nop
 8001ea4:	e7fe      	b.n	8001ea4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001ea6:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <vTaskPlaceOnEventList+0x44>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	3318      	adds	r3, #24
 8001eac:	4619      	mov	r1, r3
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7fe f9c0 	bl	8000234 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	6838      	ldr	r0, [r7, #0]
 8001eb8:	f000 fad8 	bl	800246c <prvAddCurrentTaskToDelayedList>
}
 8001ebc:	bf00      	nop
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	200000ac 	.word	0x200000ac

08001ec8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10a      	bne.n	8001ef0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8001eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ede:	f383 8811 	msr	BASEPRI, r3
 8001ee2:	f3bf 8f6f 	isb	sy
 8001ee6:	f3bf 8f4f 	dsb	sy
 8001eea:	613b      	str	r3, [r7, #16]
    }
 8001eec:	bf00      	nop
 8001eee:	e7fe      	b.n	8001eee <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	4b16      	ldr	r3, [pc, #88]	; (8001f50 <vTaskPlaceOnEventListRestricted+0x88>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	61da      	str	r2, [r3, #28]
 8001efe:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <vTaskPlaceOnEventListRestricted+0x88>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	6892      	ldr	r2, [r2, #8]
 8001f06:	621a      	str	r2, [r3, #32]
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <vTaskPlaceOnEventListRestricted+0x88>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	3218      	adds	r2, #24
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <vTaskPlaceOnEventListRestricted+0x88>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f103 0218 	add.w	r2, r3, #24
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <vTaskPlaceOnEventListRestricted+0x88>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	629a      	str	r2, [r3, #40]	; 0x28
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	1c5a      	adds	r2, r3, #1
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8001f38:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	68b8      	ldr	r0, [r7, #8]
 8001f42:	f000 fa93 	bl	800246c <prvAddCurrentTaskToDelayedList>
    }
 8001f46:	bf00      	nop
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200000ac 	.word	0x200000ac

08001f54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	; 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10a      	bne.n	8001f80 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8001f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f6e:	f383 8811 	msr	BASEPRI, r3
 8001f72:	f3bf 8f6f 	isb	sy
 8001f76:	f3bf 8f4f 	dsb	sy
 8001f7a:	60fb      	str	r3, [r7, #12]
    }
 8001f7c:	bf00      	nop
 8001f7e:	e7fe      	b.n	8001f7e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001f80:	6a3b      	ldr	r3, [r7, #32]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	6a3a      	ldr	r2, [r7, #32]
 8001f8c:	6a12      	ldr	r2, [r2, #32]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	6a3a      	ldr	r2, [r7, #32]
 8001f96:	69d2      	ldr	r2, [r2, #28]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	3318      	adds	r3, #24
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d103      	bne.n	8001fae <xTaskRemoveFromEventList+0x5a>
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	6a1a      	ldr	r2, [r3, #32]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	629a      	str	r2, [r3, #40]	; 0x28
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	1e5a      	subs	r2, r3, #1
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fbe:	4b4b      	ldr	r3, [pc, #300]	; (80020ec <xTaskRemoveFromEventList+0x198>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d161      	bne.n	800208a <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	6a3a      	ldr	r2, [r7, #32]
 8001fd2:	68d2      	ldr	r2, [r2, #12]
 8001fd4:	609a      	str	r2, [r3, #8]
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	6a3a      	ldr	r2, [r7, #32]
 8001fdc:	6892      	ldr	r2, [r2, #8]
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d103      	bne.n	8001ff4 <xTaskRemoveFromEventList+0xa0>
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	68da      	ldr	r2, [r3, #12]
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	615a      	str	r2, [r3, #20]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	1e5a      	subs	r2, r3, #1
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002008:	4b39      	ldr	r3, [pc, #228]	; (80020f0 <xTaskRemoveFromEventList+0x19c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d903      	bls.n	8002018 <xTaskRemoveFromEventList+0xc4>
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	4a36      	ldr	r2, [pc, #216]	; (80020f0 <xTaskRemoveFromEventList+0x19c>)
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800201c:	4935      	ldr	r1, [pc, #212]	; (80020f4 <xTaskRemoveFromEventList+0x1a0>)
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	3304      	adds	r3, #4
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	6a3b      	ldr	r3, [r7, #32]
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	60da      	str	r2, [r3, #12]
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	6a3a      	ldr	r2, [r7, #32]
 8002042:	3204      	adds	r2, #4
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	1d1a      	adds	r2, r3, #4
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	609a      	str	r2, [r3, #8]
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4a26      	ldr	r2, [pc, #152]	; (80020f4 <xTaskRemoveFromEventList+0x1a0>)
 800205c:	441a      	add	r2, r3
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	615a      	str	r2, [r3, #20]
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002066:	4923      	ldr	r1, [pc, #140]	; (80020f4 <xTaskRemoveFromEventList+0x1a0>)
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	1c59      	adds	r1, r3, #1
 8002076:	481f      	ldr	r0, [pc, #124]	; (80020f4 <xTaskRemoveFromEventList+0x1a0>)
 8002078:	4613      	mov	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4403      	add	r3, r0
 8002082:	6019      	str	r1, [r3, #0]
             * normally left unchanged, because it is automatically reset to a new
             * value when the tick count equals xNextTaskUnblockTime.  However if
             * tickless idling is used it might be more important to enter sleep mode
             * at the earliest possible time - so reset xNextTaskUnblockTime here to
             * ensure it is updated at the earliest possible time. */
            prvResetNextTaskUnblockTime();
 8002084:	f000 f9ba 	bl	80023fc <prvResetNextTaskUnblockTime>
 8002088:	e01b      	b.n	80020c2 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800208a:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <xTaskRemoveFromEventList+0x1a4>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	61bb      	str	r3, [r7, #24]
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	61da      	str	r2, [r3, #28]
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	6a3b      	ldr	r3, [r7, #32]
 800209c:	621a      	str	r2, [r3, #32]
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	6a3a      	ldr	r2, [r7, #32]
 80020a4:	3218      	adds	r2, #24
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	f103 0218 	add.w	r2, r3, #24
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	4a10      	ldr	r2, [pc, #64]	; (80020f8 <xTaskRemoveFromEventList+0x1a4>)
 80020b6:	629a      	str	r2, [r3, #40]	; 0x28
 80020b8:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <xTaskRemoveFromEventList+0x1a4>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	3301      	adds	r3, #1
 80020be:	4a0e      	ldr	r2, [pc, #56]	; (80020f8 <xTaskRemoveFromEventList+0x1a4>)
 80020c0:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c6:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <xTaskRemoveFromEventList+0x1a8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d905      	bls.n	80020dc <xTaskRemoveFromEventList+0x188>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80020d0:	2301      	movs	r3, #1
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80020d4:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <xTaskRemoveFromEventList+0x1ac>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	e001      	b.n	80020e0 <xTaskRemoveFromEventList+0x18c>
    }
    else
    {
        xReturn = pdFALSE;
 80020dc:	2300      	movs	r3, #0
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3728      	adds	r7, #40	; 0x28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200001ac 	.word	0x200001ac
 80020f0:	2000018c 	.word	0x2000018c
 80020f4:	200000b0 	.word	0x200000b0
 80020f8:	20000144 	.word	0x20000144
 80020fc:	200000ac 	.word	0x200000ac
 8002100:	20000198 	.word	0x20000198

08002104 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <vTaskInternalSetTimeOutState+0x24>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <vTaskInternalSetTimeOutState+0x28>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	605a      	str	r2, [r3, #4]
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	2000019c 	.word	0x2000019c
 800212c:	20000188 	.word	0x20000188

08002130 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10a      	bne.n	8002156 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002144:	f383 8811 	msr	BASEPRI, r3
 8002148:	f3bf 8f6f 	isb	sy
 800214c:	f3bf 8f4f 	dsb	sy
 8002150:	613b      	str	r3, [r7, #16]
    }
 8002152:	bf00      	nop
 8002154:	e7fe      	b.n	8002154 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10a      	bne.n	8002172 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800215c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002160:	f383 8811 	msr	BASEPRI, r3
 8002164:	f3bf 8f6f 	isb	sy
 8002168:	f3bf 8f4f 	dsb	sy
 800216c:	60fb      	str	r3, [r7, #12]
    }
 800216e:	bf00      	nop
 8002170:	e7fe      	b.n	8002170 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8002172:	f7fe fac5 	bl	8000700 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002176:	4b1f      	ldr	r3, [pc, #124]	; (80021f4 <xTaskCheckForTimeOut+0xc4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218e:	d102      	bne.n	8002196 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]
 8002194:	e026      	b.n	80021e4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <xTaskCheckForTimeOut+0xc8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d00a      	beq.n	80021b8 <xTaskCheckForTimeOut+0x88>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d305      	bcc.n	80021b8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80021ac:	2301      	movs	r3, #1
 80021ae:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	e015      	b.n	80021e4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d20b      	bcs.n	80021da <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	1ad2      	subs	r2, r2, r3
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff ff98 	bl	8002104 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61fb      	str	r3, [r7, #28]
 80021d8:	e004      	b.n	80021e4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80021e0:	2301      	movs	r3, #1
 80021e2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80021e4:	f7fe fabc 	bl	8000760 <vPortExitCritical>

    return xReturn;
 80021e8:	69fb      	ldr	r3, [r7, #28]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3720      	adds	r7, #32
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000188 	.word	0x20000188
 80021f8:	2000019c 	.word	0x2000019c

080021fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <vTaskMissedYield+0x14>)
 8002202:	2201      	movs	r2, #1
 8002204:	601a      	str	r2, [r3, #0]
}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000198 	.word	0x20000198

08002214 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800221c:	f000 f8b0 	bl	8002380 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002220:	4b18      	ldr	r3, [pc, #96]	; (8002284 <prvIdleTask+0x70>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d907      	bls.n	8002238 <prvIdleTask+0x24>
            {
                taskYIELD();
 8002228:	4b17      	ldr	r3, [pc, #92]	; (8002288 <prvIdleTask+0x74>)
 800222a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	f3bf 8f4f 	dsb	sy
 8002234:	f3bf 8f6f 	isb	sy
            /* It is not desirable to suspend then resume the scheduler on
             * each iteration of the idle task.  Therefore, a preliminary
             * test of the expected idle time is performed without the
             * scheduler suspended.  The result here is not necessarily
             * valid. */
            xExpectedIdleTime = prvGetExpectedIdleTime();
 8002238:	f7ff fb14 	bl	8001864 <prvGetExpectedIdleTime>
 800223c:	60f8      	str	r0, [r7, #12]

            if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d9eb      	bls.n	800221c <prvIdleTask+0x8>
            {
                vTaskSuspendAll();
 8002244:	f7ff fb00 	bl	8001848 <vTaskSuspendAll>
                {
                    /* Now the scheduler is suspended, the expected idle
                     * time can be sampled again, and this time its value can
                     * be used. */
                    configASSERT( xNextTaskUnblockTime >= xTickCount );
 8002248:	4b10      	ldr	r3, [pc, #64]	; (800228c <prvIdleTask+0x78>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b10      	ldr	r3, [pc, #64]	; (8002290 <prvIdleTask+0x7c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d20a      	bcs.n	800226a <prvIdleTask+0x56>
        __asm volatile
 8002254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002258:	f383 8811 	msr	BASEPRI, r3
 800225c:	f3bf 8f6f 	isb	sy
 8002260:	f3bf 8f4f 	dsb	sy
 8002264:	60bb      	str	r3, [r7, #8]
    }
 8002266:	bf00      	nop
 8002268:	e7fe      	b.n	8002268 <prvIdleTask+0x54>
                    xExpectedIdleTime = prvGetExpectedIdleTime();
 800226a:	f7ff fafb 	bl	8001864 <prvGetExpectedIdleTime>
 800226e:	60f8      	str	r0, [r7, #12]
                    /* Define the following macro to set xExpectedIdleTime to 0
                     * if the application does not want
                     * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
                    configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

                    if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d902      	bls.n	800227c <prvIdleTask+0x68>
                    {
                        traceLOW_POWER_IDLE_BEGIN();
                        portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f7fe fae0 	bl	800083c <vPortSuppressTicksAndSleep>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                ( void ) xTaskResumeAll();
 800227c:	f7ff fb28 	bl	80018d0 <xTaskResumeAll>
        prvCheckTasksWaitingTermination();
 8002280:	e7cc      	b.n	800221c <prvIdleTask+0x8>
 8002282:	bf00      	nop
 8002284:	200000b0 	.word	0x200000b0
 8002288:	e000ed04 	.word	0xe000ed04
 800228c:	200001a4 	.word	0x200001a4
 8002290:	20000188 	.word	0x20000188

08002294 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

    eSleepModeStatus eTaskConfirmSleepModeStatus( void )
    {
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
        #if ( INCLUDE_vTaskSuspend == 1 )
            /* The idle task exists in addition to the application tasks. */
            const UBaseType_t uxNonApplicationTasks = 1;
 800229a:	2301      	movs	r3, #1
 800229c:	603b      	str	r3, [r7, #0]
        #endif /* INCLUDE_vTaskSuspend */

        eSleepModeStatus eReturn = eStandardSleep;
 800229e:	2301      	movs	r3, #1
 80022a0:	71fb      	strb	r3, [r7, #7]

        /* This function must be called from a critical section. */

        if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 80022a2:	4b12      	ldr	r3, [pc, #72]	; (80022ec <eTaskConfirmSleepModeStatus+0x58>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <eTaskConfirmSleepModeStatus+0x1c>
        {
            /* A task was made ready while the scheduler was suspended. */
            eReturn = eAbortSleep;
 80022aa:	2300      	movs	r3, #0
 80022ac:	71fb      	strb	r3, [r7, #7]
 80022ae:	e017      	b.n	80022e0 <eTaskConfirmSleepModeStatus+0x4c>
        }
        else if( xYieldPending != pdFALSE )
 80022b0:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <eTaskConfirmSleepModeStatus+0x5c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d002      	beq.n	80022be <eTaskConfirmSleepModeStatus+0x2a>
        {
            /* A yield was pended while the scheduler was suspended. */
            eReturn = eAbortSleep;
 80022b8:	2300      	movs	r3, #0
 80022ba:	71fb      	strb	r3, [r7, #7]
 80022bc:	e010      	b.n	80022e0 <eTaskConfirmSleepModeStatus+0x4c>
        }
        else if( xPendedTicks != 0 )
 80022be:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <eTaskConfirmSleepModeStatus+0x60>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d002      	beq.n	80022cc <eTaskConfirmSleepModeStatus+0x38>
        {
            /* A tick interrupt has already occurred but was held pending
             * because the scheduler is suspended. */
            eReturn = eAbortSleep;
 80022c6:	2300      	movs	r3, #0
 80022c8:	71fb      	strb	r3, [r7, #7]
 80022ca:	e009      	b.n	80022e0 <eTaskConfirmSleepModeStatus+0x4c>
        }

        #if ( INCLUDE_vTaskSuspend == 1 )
            else if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 80022cc:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <eTaskConfirmSleepModeStatus+0x64>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <eTaskConfirmSleepModeStatus+0x68>)
 80022d2:	6819      	ldr	r1, [r3, #0]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	1acb      	subs	r3, r1, r3
 80022d8:	429a      	cmp	r2, r3
 80022da:	d101      	bne.n	80022e0 <eTaskConfirmSleepModeStatus+0x4c>
            {
                /* If all the tasks are in the suspended list (which might mean they
                 * have an infinite block time rather than actually being suspended)
                 * then it is safe to turn all clocks off and just wait for external
                 * interrupts. */
                eReturn = eNoTasksWaitingTimeout;
 80022dc:	2302      	movs	r3, #2
 80022de:	71fb      	strb	r3, [r7, #7]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return eReturn;
 80022e0:	79fb      	ldrb	r3, [r7, #7]
    }
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr
 80022ec:	20000144 	.word	0x20000144
 80022f0:	20000198 	.word	0x20000198
 80022f4:	20000194 	.word	0x20000194
 80022f8:	20000170 	.word	0x20000170
 80022fc:	20000184 	.word	0x20000184

08002300 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]
 800230a:	e00c      	b.n	8002326 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4a12      	ldr	r2, [pc, #72]	; (8002360 <prvInitialiseTaskLists+0x60>)
 8002318:	4413      	add	r3, r2
 800231a:	4618      	mov	r0, r3
 800231c:	f7fd ff3c 	bl	8000198 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3301      	adds	r3, #1
 8002324:	607b      	str	r3, [r7, #4]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b04      	cmp	r3, #4
 800232a:	d9ef      	bls.n	800230c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800232c:	480d      	ldr	r0, [pc, #52]	; (8002364 <prvInitialiseTaskLists+0x64>)
 800232e:	f7fd ff33 	bl	8000198 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002332:	480d      	ldr	r0, [pc, #52]	; (8002368 <prvInitialiseTaskLists+0x68>)
 8002334:	f7fd ff30 	bl	8000198 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002338:	480c      	ldr	r0, [pc, #48]	; (800236c <prvInitialiseTaskLists+0x6c>)
 800233a:	f7fd ff2d 	bl	8000198 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800233e:	480c      	ldr	r0, [pc, #48]	; (8002370 <prvInitialiseTaskLists+0x70>)
 8002340:	f7fd ff2a 	bl	8000198 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002344:	480b      	ldr	r0, [pc, #44]	; (8002374 <prvInitialiseTaskLists+0x74>)
 8002346:	f7fd ff27 	bl	8000198 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800234a:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <prvInitialiseTaskLists+0x78>)
 800234c:	4a05      	ldr	r2, [pc, #20]	; (8002364 <prvInitialiseTaskLists+0x64>)
 800234e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002350:	4b0a      	ldr	r3, [pc, #40]	; (800237c <prvInitialiseTaskLists+0x7c>)
 8002352:	4a05      	ldr	r2, [pc, #20]	; (8002368 <prvInitialiseTaskLists+0x68>)
 8002354:	601a      	str	r2, [r3, #0]
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200000b0 	.word	0x200000b0
 8002364:	20000114 	.word	0x20000114
 8002368:	20000128 	.word	0x20000128
 800236c:	20000144 	.word	0x20000144
 8002370:	20000158 	.word	0x20000158
 8002374:	20000170 	.word	0x20000170
 8002378:	2000013c 	.word	0x2000013c
 800237c:	20000140 	.word	0x20000140

08002380 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002386:	e019      	b.n	80023bc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002388:	f7fe f9ba 	bl	8000700 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800238c:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <prvCheckTasksWaitingTermination+0x50>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3304      	adds	r3, #4
 8002398:	4618      	mov	r0, r3
 800239a:	f7fd ff83 	bl	80002a4 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800239e:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <prvCheckTasksWaitingTermination+0x54>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	4a0b      	ldr	r2, [pc, #44]	; (80023d4 <prvCheckTasksWaitingTermination+0x54>)
 80023a6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <prvCheckTasksWaitingTermination+0x58>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <prvCheckTasksWaitingTermination+0x58>)
 80023b0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80023b2:	f7fe f9d5 	bl	8000760 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f810 	bl	80023dc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <prvCheckTasksWaitingTermination+0x58>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1e1      	bne.n	8002388 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000158 	.word	0x20000158
 80023d4:	20000184 	.word	0x20000184
 80023d8:	2000016c 	.word	0x2000016c

080023dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fd fec3 	bl	8000174 <vPortFree>
            vPortFree( pxTCB );
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7fd fec0 	bl	8000174 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <prvResetNextTaskUnblockTime+0x2c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d104      	bne.n	8002414 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800240a:	4b08      	ldr	r3, [pc, #32]	; (800242c <prvResetNextTaskUnblockTime+0x30>)
 800240c:	f04f 32ff 	mov.w	r2, #4294967295
 8002410:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002412:	e005      	b.n	8002420 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002414:	4b04      	ldr	r3, [pc, #16]	; (8002428 <prvResetNextTaskUnblockTime+0x2c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a03      	ldr	r2, [pc, #12]	; (800242c <prvResetNextTaskUnblockTime+0x30>)
 800241e:	6013      	str	r3, [r2, #0]
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr
 8002428:	2000013c 	.word	0x2000013c
 800242c:	200001a4 	.word	0x200001a4

08002430 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002436:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <xTaskGetSchedulerState+0x34>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d102      	bne.n	8002444 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800243e:	2301      	movs	r3, #1
 8002440:	607b      	str	r3, [r7, #4]
 8002442:	e008      	b.n	8002456 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <xTaskGetSchedulerState+0x38>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d102      	bne.n	8002452 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800244c:	2302      	movs	r3, #2
 800244e:	607b      	str	r3, [r7, #4]
 8002450:	e001      	b.n	8002456 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002452:	2300      	movs	r3, #0
 8002454:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002456:	687b      	ldr	r3, [r7, #4]
    }
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000190 	.word	0x20000190
 8002468:	200001ac 	.word	0x200001ac

0800246c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002476:	4b2e      	ldr	r3, [pc, #184]	; (8002530 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800247c:	4b2d      	ldr	r3, [pc, #180]	; (8002534 <prvAddCurrentTaskToDelayedList+0xc8>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	3304      	adds	r3, #4
 8002482:	4618      	mov	r0, r3
 8002484:	f7fd ff0e 	bl	80002a4 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248e:	d124      	bne.n	80024da <prvAddCurrentTaskToDelayedList+0x6e>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d021      	beq.n	80024da <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002496:	4b28      	ldr	r3, [pc, #160]	; (8002538 <prvAddCurrentTaskToDelayedList+0xcc>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	4b25      	ldr	r3, [pc, #148]	; (8002534 <prvAddCurrentTaskToDelayedList+0xc8>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	4b23      	ldr	r3, [pc, #140]	; (8002534 <prvAddCurrentTaskToDelayedList+0xc8>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	6892      	ldr	r2, [r2, #8]
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	4b21      	ldr	r3, [pc, #132]	; (8002534 <prvAddCurrentTaskToDelayedList+0xc8>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	3204      	adds	r2, #4
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <prvAddCurrentTaskToDelayedList+0xc8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	1d1a      	adds	r2, r3, #4
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <prvAddCurrentTaskToDelayedList+0xc8>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a1b      	ldr	r2, [pc, #108]	; (8002538 <prvAddCurrentTaskToDelayedList+0xcc>)
 80024ca:	615a      	str	r2, [r3, #20]
 80024cc:	4b1a      	ldr	r3, [pc, #104]	; (8002538 <prvAddCurrentTaskToDelayedList+0xcc>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	3301      	adds	r3, #1
 80024d2:	4a19      	ldr	r2, [pc, #100]	; (8002538 <prvAddCurrentTaskToDelayedList+0xcc>)
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80024d8:	e026      	b.n	8002528 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4413      	add	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80024e2:	4b14      	ldr	r3, [pc, #80]	; (8002534 <prvAddCurrentTaskToDelayedList+0xc8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d209      	bcs.n	8002506 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024f2:	4b12      	ldr	r3, [pc, #72]	; (800253c <prvAddCurrentTaskToDelayedList+0xd0>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <prvAddCurrentTaskToDelayedList+0xc8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3304      	adds	r3, #4
 80024fc:	4619      	mov	r1, r3
 80024fe:	4610      	mov	r0, r2
 8002500:	f7fd fe98 	bl	8000234 <vListInsert>
}
 8002504:	e010      	b.n	8002528 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002506:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <prvAddCurrentTaskToDelayedList+0xc8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	3304      	adds	r3, #4
 8002510:	4619      	mov	r1, r3
 8002512:	4610      	mov	r0, r2
 8002514:	f7fd fe8e 	bl	8000234 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002518:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <prvAddCurrentTaskToDelayedList+0xd8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	429a      	cmp	r2, r3
 8002520:	d202      	bcs.n	8002528 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 8002522:	4a08      	ldr	r2, [pc, #32]	; (8002544 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6013      	str	r3, [r2, #0]
}
 8002528:	bf00      	nop
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20000188 	.word	0x20000188
 8002534:	200000ac 	.word	0x200000ac
 8002538:	20000170 	.word	0x20000170
 800253c:	20000140 	.word	0x20000140
 8002540:	2000013c 	.word	0x2000013c
 8002544:	200001a4 	.word	0x200001a4

08002548 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800254e:	2300      	movs	r3, #0
 8002550:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002552:	f000 fa45 	bl	80029e0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002556:	4b11      	ldr	r3, [pc, #68]	; (800259c <xTimerCreateTimerTask+0x54>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <xTimerCreateTimerTask+0x58>)
 8002560:	9301      	str	r3, [sp, #4]
 8002562:	2303      	movs	r3, #3
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	2300      	movs	r3, #0
 8002568:	2280      	movs	r2, #128	; 0x80
 800256a:	490e      	ldr	r1, [pc, #56]	; (80025a4 <xTimerCreateTimerTask+0x5c>)
 800256c:	480e      	ldr	r0, [pc, #56]	; (80025a8 <xTimerCreateTimerTask+0x60>)
 800256e:	f7fe fe41 	bl	80011f4 <xTaskCreate>
 8002572:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10a      	bne.n	8002590 <xTimerCreateTimerTask+0x48>
        __asm volatile
 800257a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800257e:	f383 8811 	msr	BASEPRI, r3
 8002582:	f3bf 8f6f 	isb	sy
 8002586:	f3bf 8f4f 	dsb	sy
 800258a:	603b      	str	r3, [r7, #0]
    }
 800258c:	bf00      	nop
 800258e:	e7fe      	b.n	800258e <xTimerCreateTimerTask+0x46>
        return xReturn;
 8002590:	687b      	ldr	r3, [r7, #4]
    }
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	200001e0 	.word	0x200001e0
 80025a0:	200001e4 	.word	0x200001e4
 80025a4:	08003f10 	.word	0x08003f10
 80025a8:	08002651 	.word	0x08002651

080025ac <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80025b8:	e008      	b.n	80025cc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	4413      	add	r3, r2
 80025c2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	699a      	ldr	r2, [r3, #24]
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	18d1      	adds	r1, r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 f8db 	bl	8002794 <prvInsertTimerInActiveList>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1ea      	bne.n	80025ba <prvReloadTimer+0xe>
        }
    }
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025fa:	4b14      	ldr	r3, [pc, #80]	; (800264c <prvProcessExpiredTimer+0x5c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	3304      	adds	r3, #4
 8002608:	4618      	mov	r0, r3
 800260a:	f7fd fe4b 	bl	80002a4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f7ff ffc3 	bl	80025ac <prvReloadTimer>
 8002626:	e008      	b.n	800263a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800262e:	f023 0301 	bic.w	r3, r3, #1
 8002632:	b2da      	uxtb	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	4798      	blx	r3
    }
 8002642:	bf00      	nop
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	200001d8 	.word	0x200001d8

08002650 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002658:	f107 0308 	add.w	r3, r7, #8
 800265c:	4618      	mov	r0, r3
 800265e:	f000 f857 	bl	8002710 <prvGetNextExpireTime>
 8002662:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	4619      	mov	r1, r3
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 f803 	bl	8002674 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800266e:	f000 f8d3 	bl	8002818 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002672:	e7f1      	b.n	8002658 <prvTimerTask+0x8>

08002674 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800267e:	f7ff f8e3 	bl	8001848 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002682:	f107 0308 	add.w	r3, r7, #8
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f864 	bl	8002754 <prvSampleTimeNow>
 800268c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d130      	bne.n	80026f6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10a      	bne.n	80026b0 <prvProcessTimerOrBlockTask+0x3c>
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d806      	bhi.n	80026b0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80026a2:	f7ff f915 	bl	80018d0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80026a6:	68f9      	ldr	r1, [r7, #12]
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff ffa1 	bl	80025f0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80026ae:	e024      	b.n	80026fa <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d008      	beq.n	80026c8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80026b6:	4b13      	ldr	r3, [pc, #76]	; (8002704 <prvProcessTimerOrBlockTask+0x90>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <prvProcessTimerOrBlockTask+0x50>
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <prvProcessTimerOrBlockTask+0x52>
 80026c4:	2300      	movs	r3, #0
 80026c6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80026c8:	4b0f      	ldr	r3, [pc, #60]	; (8002708 <prvProcessTimerOrBlockTask+0x94>)
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	4619      	mov	r1, r3
 80026d6:	f7fe fc75 	bl	8000fc4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80026da:	f7ff f8f9 	bl	80018d0 <xTaskResumeAll>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10a      	bne.n	80026fa <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80026e4:	4b09      	ldr	r3, [pc, #36]	; (800270c <prvProcessTimerOrBlockTask+0x98>)
 80026e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	f3bf 8f6f 	isb	sy
    }
 80026f4:	e001      	b.n	80026fa <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80026f6:	f7ff f8eb 	bl	80018d0 <xTaskResumeAll>
    }
 80026fa:	bf00      	nop
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	200001dc 	.word	0x200001dc
 8002708:	200001e0 	.word	0x200001e0
 800270c:	e000ed04 	.word	0xe000ed04

08002710 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002718:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <prvGetNextExpireTime+0x40>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <prvGetNextExpireTime+0x16>
 8002722:	2201      	movs	r2, #1
 8002724:	e000      	b.n	8002728 <prvGetNextExpireTime+0x18>
 8002726:	2200      	movs	r2, #0
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d105      	bne.n	8002740 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <prvGetNextExpireTime+0x40>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	e001      	b.n	8002744 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002744:	68fb      	ldr	r3, [r7, #12]
    }
 8002746:	4618      	mov	r0, r3
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr
 8002750:	200001d8 	.word	0x200001d8

08002754 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800275c:	f7ff f9b4 	bl	8001ac8 <xTaskGetTickCount>
 8002760:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002762:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <prvSampleTimeNow+0x3c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	429a      	cmp	r2, r3
 800276a:	d205      	bcs.n	8002778 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800276c:	f000 f912 	bl	8002994 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	e002      	b.n	800277e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800277e:	4a04      	ldr	r2, [pc, #16]	; (8002790 <prvSampleTimeNow+0x3c>)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002784:	68fb      	ldr	r3, [r7, #12]
    }
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	200001e8 	.word	0x200001e8

08002794 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d812      	bhi.n	80027e0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	1ad2      	subs	r2, r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d302      	bcc.n	80027ce <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80027c8:	2301      	movs	r3, #1
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	e01b      	b.n	8002806 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80027ce:	4b10      	ldr	r3, [pc, #64]	; (8002810 <prvInsertTimerInActiveList+0x7c>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3304      	adds	r3, #4
 80027d6:	4619      	mov	r1, r3
 80027d8:	4610      	mov	r0, r2
 80027da:	f7fd fd2b 	bl	8000234 <vListInsert>
 80027de:	e012      	b.n	8002806 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d206      	bcs.n	80027f6 <prvInsertTimerInActiveList+0x62>
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d302      	bcc.n	80027f6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80027f0:	2301      	movs	r3, #1
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	e007      	b.n	8002806 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80027f6:	4b07      	ldr	r3, [pc, #28]	; (8002814 <prvInsertTimerInActiveList+0x80>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	3304      	adds	r3, #4
 80027fe:	4619      	mov	r1, r3
 8002800:	4610      	mov	r0, r2
 8002802:	f7fd fd17 	bl	8000234 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002806:	697b      	ldr	r3, [r7, #20]
    }
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	200001dc 	.word	0x200001dc
 8002814:	200001d8 	.word	0x200001d8

08002818 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800281e:	e0a6      	b.n	800296e <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	f2c0 80a2 	blt.w	800296c <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d004      	beq.n	800283e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	3304      	adds	r3, #4
 8002838:	4618      	mov	r0, r3
 800283a:	f7fd fd33 	bl	80002a4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800283e:	1d3b      	adds	r3, r7, #4
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff87 	bl	8002754 <prvSampleTimeNow>
 8002846:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	3b01      	subs	r3, #1
 800284c:	2b08      	cmp	r3, #8
 800284e:	f200 808e 	bhi.w	800296e <prvProcessReceivedCommands+0x156>
 8002852:	a201      	add	r2, pc, #4	; (adr r2, 8002858 <prvProcessReceivedCommands+0x40>)
 8002854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002858:	0800287d 	.word	0x0800287d
 800285c:	0800287d 	.word	0x0800287d
 8002860:	080028e5 	.word	0x080028e5
 8002864:	080028f9 	.word	0x080028f9
 8002868:	08002943 	.word	0x08002943
 800286c:	0800287d 	.word	0x0800287d
 8002870:	0800287d 	.word	0x0800287d
 8002874:	080028e5 	.word	0x080028e5
 8002878:	080028f9 	.word	0x080028f9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	b2da      	uxtb	r2, r3
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	18d1      	adds	r1, r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	69f8      	ldr	r0, [r7, #28]
 800289c:	f7ff ff7a 	bl	8002794 <prvInsertTimerInActiveList>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d063      	beq.n	800296e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d009      	beq.n	80028c8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	4413      	add	r3, r2
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4619      	mov	r1, r3
 80028c0:	69f8      	ldr	r0, [r7, #28]
 80028c2:	f7ff fe73 	bl	80025ac <prvReloadTimer>
 80028c6:	e008      	b.n	80028da <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028ce:	f023 0301 	bic.w	r3, r3, #1
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	69f8      	ldr	r0, [r7, #28]
 80028e0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80028e2:	e044      	b.n	800296e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028ea:	f023 0301 	bic.w	r3, r3, #1
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80028f6:	e03a      	b.n	800296e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	b2da      	uxtb	r2, r3
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10a      	bne.n	800292e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8002918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291c:	f383 8811 	msr	BASEPRI, r3
 8002920:	f3bf 8f6f 	isb	sy
 8002924:	f3bf 8f4f 	dsb	sy
 8002928:	617b      	str	r3, [r7, #20]
    }
 800292a:	bf00      	nop
 800292c:	e7fe      	b.n	800292c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	699a      	ldr	r2, [r3, #24]
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	18d1      	adds	r1, r2, r3
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	69f8      	ldr	r0, [r7, #28]
 800293c:	f7ff ff2a 	bl	8002794 <prvInsertTimerInActiveList>
                        break;
 8002940:	e015      	b.n	800296e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d103      	bne.n	8002958 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8002950:	69f8      	ldr	r0, [r7, #28]
 8002952:	f7fd fc0f 	bl	8000174 <vPortFree>
 8002956:	e00a      	b.n	800296e <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800295e:	f023 0301 	bic.w	r3, r3, #1
 8002962:	b2da      	uxtb	r2, r3
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800296a:	e000      	b.n	800296e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800296c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800296e:	4b08      	ldr	r3, [pc, #32]	; (8002990 <prvProcessReceivedCommands+0x178>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f107 0108 	add.w	r1, r7, #8
 8002976:	2200      	movs	r2, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f7fe f967 	bl	8000c4c <xQueueReceive>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	f47f af4d 	bne.w	8002820 <prvProcessReceivedCommands+0x8>
        }
    }
 8002986:	bf00      	nop
 8002988:	bf00      	nop
 800298a:	3720      	adds	r7, #32
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	200001e0 	.word	0x200001e0

08002994 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800299a:	e009      	b.n	80029b0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800299c:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <prvSwitchTimerLists+0x44>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80029a6:	f04f 31ff 	mov.w	r1, #4294967295
 80029aa:	6838      	ldr	r0, [r7, #0]
 80029ac:	f7ff fe20 	bl	80025f0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80029b0:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <prvSwitchTimerLists+0x44>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80029ba:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <prvSwitchTimerLists+0x44>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <prvSwitchTimerLists+0x48>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a04      	ldr	r2, [pc, #16]	; (80029d8 <prvSwitchTimerLists+0x44>)
 80029c6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80029c8:	4a04      	ldr	r2, [pc, #16]	; (80029dc <prvSwitchTimerLists+0x48>)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6013      	str	r3, [r2, #0]
    }
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	200001d8 	.word	0x200001d8
 80029dc:	200001dc 	.word	0x200001dc

080029e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80029e4:	f7fd fe8c 	bl	8000700 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80029e8:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <prvCheckForValidListAndQueue+0x54>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d11d      	bne.n	8002a2c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80029f0:	4811      	ldr	r0, [pc, #68]	; (8002a38 <prvCheckForValidListAndQueue+0x58>)
 80029f2:	f7fd fbd1 	bl	8000198 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80029f6:	4811      	ldr	r0, [pc, #68]	; (8002a3c <prvCheckForValidListAndQueue+0x5c>)
 80029f8:	f7fd fbce 	bl	8000198 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80029fc:	4b10      	ldr	r3, [pc, #64]	; (8002a40 <prvCheckForValidListAndQueue+0x60>)
 80029fe:	4a0e      	ldr	r2, [pc, #56]	; (8002a38 <prvCheckForValidListAndQueue+0x58>)
 8002a00:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002a02:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <prvCheckForValidListAndQueue+0x64>)
 8002a04:	4a0d      	ldr	r2, [pc, #52]	; (8002a3c <prvCheckForValidListAndQueue+0x5c>)
 8002a06:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002a08:	2200      	movs	r2, #0
 8002a0a:	210c      	movs	r1, #12
 8002a0c:	200a      	movs	r0, #10
 8002a0e:	f7fe f8ab 	bl	8000b68 <xQueueGenericCreate>
 8002a12:	4603      	mov	r3, r0
 8002a14:	4a07      	ldr	r2, [pc, #28]	; (8002a34 <prvCheckForValidListAndQueue+0x54>)
 8002a16:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <prvCheckForValidListAndQueue+0x54>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002a20:	4b04      	ldr	r3, [pc, #16]	; (8002a34 <prvCheckForValidListAndQueue+0x54>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4908      	ldr	r1, [pc, #32]	; (8002a48 <prvCheckForValidListAndQueue+0x68>)
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fe fa7e 	bl	8000f28 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002a2c:	f7fd fe98 	bl	8000760 <vPortExitCritical>
    }
 8002a30:	bf00      	nop
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	200001e0 	.word	0x200001e0
 8002a38:	200001b0 	.word	0x200001b0
 8002a3c:	200001c4 	.word	0x200001c4
 8002a40:	200001d8 	.word	0x200001d8
 8002a44:	200001dc 	.word	0x200001dc
 8002a48:	08003f18 	.word	0x08003f18

08002a4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a4c:	f7fe fbcc 	bl	80011e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a50:	480b      	ldr	r0, [pc, #44]	; (8002a80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002a52:	490c      	ldr	r1, [pc, #48]	; (8002a84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002a54:	4a0c      	ldr	r2, [pc, #48]	; (8002a88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a58:	e002      	b.n	8002a60 <LoopCopyDataInit>

08002a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a5e:	3304      	adds	r3, #4

08002a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a64:	d3f9      	bcc.n	8002a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a66:	4a09      	ldr	r2, [pc, #36]	; (8002a8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002a68:	4c09      	ldr	r4, [pc, #36]	; (8002a90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a6c:	e001      	b.n	8002a72 <LoopFillZerobss>

08002a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a70:	3204      	adds	r2, #4

08002a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a74:	d3fb      	bcc.n	8002a6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a76:	f001 f92b 	bl	8003cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a7a:	f7fd fc75 	bl	8000368 <main>
  bx lr
 8002a7e:	4770      	bx	lr
  ldr r0, =_sdata
 8002a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a84:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002a88:	08003f54 	.word	0x08003f54
  ldr r2, =_sbss
 8002a8c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002a90:	20000298 	.word	0x20000298

08002a94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a94:	e7fe      	b.n	8002a94 <ADC1_2_IRQHandler>
	...

08002a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a9c:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <HAL_Init+0x28>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a07      	ldr	r2, [pc, #28]	; (8002ac0 <HAL_Init+0x28>)
 8002aa2:	f043 0310 	orr.w	r3, r3, #16
 8002aa6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aa8:	2003      	movs	r0, #3
 8002aaa:	f000 f8d1 	bl	8002c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f7fe faee 	bl	8001090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ab4:	f7fe faba 	bl	800102c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40022000 	.word	0x40022000

08002ac4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <HAL_IncTick+0x1c>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <HAL_IncTick+0x20>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	4a03      	ldr	r2, [pc, #12]	; (8002ae4 <HAL_IncTick+0x20>)
 8002ad6:	6013      	str	r3, [r2, #0]
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr
 8002ae0:	20000010 	.word	0x20000010
 8002ae4:	20000284 	.word	0x20000284

08002ae8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return uwTick;
 8002aec:	4b02      	ldr	r3, [pc, #8]	; (8002af8 <HAL_GetTick+0x10>)
 8002aee:	681b      	ldr	r3, [r3, #0]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr
 8002af8:	20000284 	.word	0x20000284

08002afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <__NVIC_SetPriorityGrouping+0x44>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b18:	4013      	ands	r3, r2
 8002b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b2e:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <__NVIC_SetPriorityGrouping+0x44>)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	60d3      	str	r3, [r2, #12]
}
 8002b34:	bf00      	nop
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	e000ed00 	.word	0xe000ed00

08002b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b48:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <__NVIC_GetPriorityGrouping+0x18>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	0a1b      	lsrs	r3, r3, #8
 8002b4e:	f003 0307 	and.w	r3, r3, #7
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	db0b      	blt.n	8002b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	f003 021f 	and.w	r2, r3, #31
 8002b78:	4906      	ldr	r1, [pc, #24]	; (8002b94 <__NVIC_EnableIRQ+0x34>)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	2001      	movs	r0, #1
 8002b82:	fa00 f202 	lsl.w	r2, r0, r2
 8002b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr
 8002b94:	e000e100 	.word	0xe000e100

08002b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	6039      	str	r1, [r7, #0]
 8002ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	db0a      	blt.n	8002bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	490c      	ldr	r1, [pc, #48]	; (8002be4 <__NVIC_SetPriority+0x4c>)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	0112      	lsls	r2, r2, #4
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	440b      	add	r3, r1
 8002bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bc0:	e00a      	b.n	8002bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4908      	ldr	r1, [pc, #32]	; (8002be8 <__NVIC_SetPriority+0x50>)
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	3b04      	subs	r3, #4
 8002bd0:	0112      	lsls	r2, r2, #4
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	761a      	strb	r2, [r3, #24]
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	e000e100 	.word	0xe000e100
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b089      	sub	sp, #36	; 0x24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f1c3 0307 	rsb	r3, r3, #7
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	bf28      	it	cs
 8002c0a:	2304      	movcs	r3, #4
 8002c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3304      	adds	r3, #4
 8002c12:	2b06      	cmp	r3, #6
 8002c14:	d902      	bls.n	8002c1c <NVIC_EncodePriority+0x30>
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	3b03      	subs	r3, #3
 8002c1a:	e000      	b.n	8002c1e <NVIC_EncodePriority+0x32>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c20:	f04f 32ff 	mov.w	r2, #4294967295
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43da      	mvns	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	401a      	ands	r2, r3
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c34:	f04f 31ff 	mov.w	r1, #4294967295
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3e:	43d9      	mvns	r1, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c44:	4313      	orrs	r3, r2
         );
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3724      	adds	r7, #36	; 0x24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7ff ff4f 	bl	8002afc <__NVIC_SetPriorityGrouping>
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b086      	sub	sp, #24
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	607a      	str	r2, [r7, #4]
 8002c72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c78:	f7ff ff64 	bl	8002b44 <__NVIC_GetPriorityGrouping>
 8002c7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	68b9      	ldr	r1, [r7, #8]
 8002c82:	6978      	ldr	r0, [r7, #20]
 8002c84:	f7ff ffb2 	bl	8002bec <NVIC_EncodePriority>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff ff81 	bl	8002b98 <__NVIC_SetPriority>
}
 8002c96:	bf00      	nop
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff ff57 	bl	8002b60 <__NVIC_EnableIRQ>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b08b      	sub	sp, #44	; 0x2c
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cce:	e169      	b.n	8002fa4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	69fa      	ldr	r2, [r7, #28]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	f040 8158 	bne.w	8002f9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4a9a      	ldr	r2, [pc, #616]	; (8002f5c <HAL_GPIO_Init+0x2a0>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d05e      	beq.n	8002db6 <HAL_GPIO_Init+0xfa>
 8002cf8:	4a98      	ldr	r2, [pc, #608]	; (8002f5c <HAL_GPIO_Init+0x2a0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d875      	bhi.n	8002dea <HAL_GPIO_Init+0x12e>
 8002cfe:	4a98      	ldr	r2, [pc, #608]	; (8002f60 <HAL_GPIO_Init+0x2a4>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d058      	beq.n	8002db6 <HAL_GPIO_Init+0xfa>
 8002d04:	4a96      	ldr	r2, [pc, #600]	; (8002f60 <HAL_GPIO_Init+0x2a4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d86f      	bhi.n	8002dea <HAL_GPIO_Init+0x12e>
 8002d0a:	4a96      	ldr	r2, [pc, #600]	; (8002f64 <HAL_GPIO_Init+0x2a8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d052      	beq.n	8002db6 <HAL_GPIO_Init+0xfa>
 8002d10:	4a94      	ldr	r2, [pc, #592]	; (8002f64 <HAL_GPIO_Init+0x2a8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d869      	bhi.n	8002dea <HAL_GPIO_Init+0x12e>
 8002d16:	4a94      	ldr	r2, [pc, #592]	; (8002f68 <HAL_GPIO_Init+0x2ac>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d04c      	beq.n	8002db6 <HAL_GPIO_Init+0xfa>
 8002d1c:	4a92      	ldr	r2, [pc, #584]	; (8002f68 <HAL_GPIO_Init+0x2ac>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d863      	bhi.n	8002dea <HAL_GPIO_Init+0x12e>
 8002d22:	4a92      	ldr	r2, [pc, #584]	; (8002f6c <HAL_GPIO_Init+0x2b0>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d046      	beq.n	8002db6 <HAL_GPIO_Init+0xfa>
 8002d28:	4a90      	ldr	r2, [pc, #576]	; (8002f6c <HAL_GPIO_Init+0x2b0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d85d      	bhi.n	8002dea <HAL_GPIO_Init+0x12e>
 8002d2e:	2b12      	cmp	r3, #18
 8002d30:	d82a      	bhi.n	8002d88 <HAL_GPIO_Init+0xcc>
 8002d32:	2b12      	cmp	r3, #18
 8002d34:	d859      	bhi.n	8002dea <HAL_GPIO_Init+0x12e>
 8002d36:	a201      	add	r2, pc, #4	; (adr r2, 8002d3c <HAL_GPIO_Init+0x80>)
 8002d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3c:	08002db7 	.word	0x08002db7
 8002d40:	08002d91 	.word	0x08002d91
 8002d44:	08002da3 	.word	0x08002da3
 8002d48:	08002de5 	.word	0x08002de5
 8002d4c:	08002deb 	.word	0x08002deb
 8002d50:	08002deb 	.word	0x08002deb
 8002d54:	08002deb 	.word	0x08002deb
 8002d58:	08002deb 	.word	0x08002deb
 8002d5c:	08002deb 	.word	0x08002deb
 8002d60:	08002deb 	.word	0x08002deb
 8002d64:	08002deb 	.word	0x08002deb
 8002d68:	08002deb 	.word	0x08002deb
 8002d6c:	08002deb 	.word	0x08002deb
 8002d70:	08002deb 	.word	0x08002deb
 8002d74:	08002deb 	.word	0x08002deb
 8002d78:	08002deb 	.word	0x08002deb
 8002d7c:	08002deb 	.word	0x08002deb
 8002d80:	08002d99 	.word	0x08002d99
 8002d84:	08002dad 	.word	0x08002dad
 8002d88:	4a79      	ldr	r2, [pc, #484]	; (8002f70 <HAL_GPIO_Init+0x2b4>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d013      	beq.n	8002db6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d8e:	e02c      	b.n	8002dea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	623b      	str	r3, [r7, #32]
          break;
 8002d96:	e029      	b.n	8002dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	623b      	str	r3, [r7, #32]
          break;
 8002da0:	e024      	b.n	8002dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	3308      	adds	r3, #8
 8002da8:	623b      	str	r3, [r7, #32]
          break;
 8002daa:	e01f      	b.n	8002dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	330c      	adds	r3, #12
 8002db2:	623b      	str	r3, [r7, #32]
          break;
 8002db4:	e01a      	b.n	8002dec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d102      	bne.n	8002dc4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	623b      	str	r3, [r7, #32]
          break;
 8002dc2:	e013      	b.n	8002dec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d105      	bne.n	8002dd8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dcc:	2308      	movs	r3, #8
 8002dce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69fa      	ldr	r2, [r7, #28]
 8002dd4:	611a      	str	r2, [r3, #16]
          break;
 8002dd6:	e009      	b.n	8002dec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dd8:	2308      	movs	r3, #8
 8002dda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69fa      	ldr	r2, [r7, #28]
 8002de0:	615a      	str	r2, [r3, #20]
          break;
 8002de2:	e003      	b.n	8002dec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002de4:	2300      	movs	r3, #0
 8002de6:	623b      	str	r3, [r7, #32]
          break;
 8002de8:	e000      	b.n	8002dec <HAL_GPIO_Init+0x130>
          break;
 8002dea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	2bff      	cmp	r3, #255	; 0xff
 8002df0:	d801      	bhi.n	8002df6 <HAL_GPIO_Init+0x13a>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	e001      	b.n	8002dfa <HAL_GPIO_Init+0x13e>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	2bff      	cmp	r3, #255	; 0xff
 8002e00:	d802      	bhi.n	8002e08 <HAL_GPIO_Init+0x14c>
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	e002      	b.n	8002e0e <HAL_GPIO_Init+0x152>
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	3b08      	subs	r3, #8
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	210f      	movs	r1, #15
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	401a      	ands	r2, r3
 8002e20:	6a39      	ldr	r1, [r7, #32]
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	fa01 f303 	lsl.w	r3, r1, r3
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 80b1 	beq.w	8002f9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e3c:	4b4d      	ldr	r3, [pc, #308]	; (8002f74 <HAL_GPIO_Init+0x2b8>)
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	4a4c      	ldr	r2, [pc, #304]	; (8002f74 <HAL_GPIO_Init+0x2b8>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	6193      	str	r3, [r2, #24]
 8002e48:	4b4a      	ldr	r3, [pc, #296]	; (8002f74 <HAL_GPIO_Init+0x2b8>)
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e54:	4a48      	ldr	r2, [pc, #288]	; (8002f78 <HAL_GPIO_Init+0x2bc>)
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	089b      	lsrs	r3, r3, #2
 8002e5a:	3302      	adds	r3, #2
 8002e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	220f      	movs	r2, #15
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	4013      	ands	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a40      	ldr	r2, [pc, #256]	; (8002f7c <HAL_GPIO_Init+0x2c0>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d013      	beq.n	8002ea8 <HAL_GPIO_Init+0x1ec>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a3f      	ldr	r2, [pc, #252]	; (8002f80 <HAL_GPIO_Init+0x2c4>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d00d      	beq.n	8002ea4 <HAL_GPIO_Init+0x1e8>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a3e      	ldr	r2, [pc, #248]	; (8002f84 <HAL_GPIO_Init+0x2c8>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d007      	beq.n	8002ea0 <HAL_GPIO_Init+0x1e4>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a3d      	ldr	r2, [pc, #244]	; (8002f88 <HAL_GPIO_Init+0x2cc>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d101      	bne.n	8002e9c <HAL_GPIO_Init+0x1e0>
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e006      	b.n	8002eaa <HAL_GPIO_Init+0x1ee>
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	e004      	b.n	8002eaa <HAL_GPIO_Init+0x1ee>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e002      	b.n	8002eaa <HAL_GPIO_Init+0x1ee>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <HAL_GPIO_Init+0x1ee>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eac:	f002 0203 	and.w	r2, r2, #3
 8002eb0:	0092      	lsls	r2, r2, #2
 8002eb2:	4093      	lsls	r3, r2
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002eba:	492f      	ldr	r1, [pc, #188]	; (8002f78 <HAL_GPIO_Init+0x2bc>)
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	089b      	lsrs	r3, r3, #2
 8002ec0:	3302      	adds	r3, #2
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d006      	beq.n	8002ee2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ed4:	4b2d      	ldr	r3, [pc, #180]	; (8002f8c <HAL_GPIO_Init+0x2d0>)
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	492c      	ldr	r1, [pc, #176]	; (8002f8c <HAL_GPIO_Init+0x2d0>)
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	608b      	str	r3, [r1, #8]
 8002ee0:	e006      	b.n	8002ef0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ee2:	4b2a      	ldr	r3, [pc, #168]	; (8002f8c <HAL_GPIO_Init+0x2d0>)
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	4928      	ldr	r1, [pc, #160]	; (8002f8c <HAL_GPIO_Init+0x2d0>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d006      	beq.n	8002f0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002efc:	4b23      	ldr	r3, [pc, #140]	; (8002f8c <HAL_GPIO_Init+0x2d0>)
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	4922      	ldr	r1, [pc, #136]	; (8002f8c <HAL_GPIO_Init+0x2d0>)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60cb      	str	r3, [r1, #12]
 8002f08:	e006      	b.n	8002f18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f0a:	4b20      	ldr	r3, [pc, #128]	; (8002f8c <HAL_GPIO_Init+0x2d0>)
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	43db      	mvns	r3, r3
 8002f12:	491e      	ldr	r1, [pc, #120]	; (8002f8c <HAL_GPIO_Init+0x2d0>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d006      	beq.n	8002f32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f24:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <HAL_GPIO_Init+0x2d0>)
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	4918      	ldr	r1, [pc, #96]	; (8002f8c <HAL_GPIO_Init+0x2d0>)
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	604b      	str	r3, [r1, #4]
 8002f30:	e006      	b.n	8002f40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f32:	4b16      	ldr	r3, [pc, #88]	; (8002f8c <HAL_GPIO_Init+0x2d0>)
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	4914      	ldr	r1, [pc, #80]	; (8002f8c <HAL_GPIO_Init+0x2d0>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d021      	beq.n	8002f90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f4c:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <HAL_GPIO_Init+0x2d0>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	490e      	ldr	r1, [pc, #56]	; (8002f8c <HAL_GPIO_Init+0x2d0>)
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	600b      	str	r3, [r1, #0]
 8002f58:	e021      	b.n	8002f9e <HAL_GPIO_Init+0x2e2>
 8002f5a:	bf00      	nop
 8002f5c:	10320000 	.word	0x10320000
 8002f60:	10310000 	.word	0x10310000
 8002f64:	10220000 	.word	0x10220000
 8002f68:	10210000 	.word	0x10210000
 8002f6c:	10120000 	.word	0x10120000
 8002f70:	10110000 	.word	0x10110000
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40010000 	.word	0x40010000
 8002f7c:	40010800 	.word	0x40010800
 8002f80:	40010c00 	.word	0x40010c00
 8002f84:	40011000 	.word	0x40011000
 8002f88:	40011400 	.word	0x40011400
 8002f8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_GPIO_Init+0x304>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	43db      	mvns	r3, r3
 8002f98:	4909      	ldr	r1, [pc, #36]	; (8002fc0 <HAL_GPIO_Init+0x304>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	fa22 f303 	lsr.w	r3, r2, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f47f ae8e 	bne.w	8002cd0 <HAL_GPIO_Init+0x14>
  }
}
 8002fb4:	bf00      	nop
 8002fb6:	bf00      	nop
 8002fb8:	372c      	adds	r7, #44	; 0x2c
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr
 8002fc0:	40010400 	.word	0x40010400

08002fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	807b      	strh	r3, [r7, #2]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fd4:	787b      	ldrb	r3, [r7, #1]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fda:	887a      	ldrh	r2, [r7, #2]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fe0:	e003      	b.n	8002fea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fe2:	887b      	ldrh	r3, [r7, #2]
 8002fe4:	041a      	lsls	r2, r3, #16
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	611a      	str	r2, [r3, #16]
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e26c      	b.n	80034e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 8087 	beq.w	8003122 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003014:	4b92      	ldr	r3, [pc, #584]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f003 030c 	and.w	r3, r3, #12
 800301c:	2b04      	cmp	r3, #4
 800301e:	d00c      	beq.n	800303a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003020:	4b8f      	ldr	r3, [pc, #572]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 030c 	and.w	r3, r3, #12
 8003028:	2b08      	cmp	r3, #8
 800302a:	d112      	bne.n	8003052 <HAL_RCC_OscConfig+0x5e>
 800302c:	4b8c      	ldr	r3, [pc, #560]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003038:	d10b      	bne.n	8003052 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800303a:	4b89      	ldr	r3, [pc, #548]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d06c      	beq.n	8003120 <HAL_RCC_OscConfig+0x12c>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d168      	bne.n	8003120 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e246      	b.n	80034e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800305a:	d106      	bne.n	800306a <HAL_RCC_OscConfig+0x76>
 800305c:	4b80      	ldr	r3, [pc, #512]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a7f      	ldr	r2, [pc, #508]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 8003062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003066:	6013      	str	r3, [r2, #0]
 8003068:	e02e      	b.n	80030c8 <HAL_RCC_OscConfig+0xd4>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10c      	bne.n	800308c <HAL_RCC_OscConfig+0x98>
 8003072:	4b7b      	ldr	r3, [pc, #492]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a7a      	ldr	r2, [pc, #488]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 8003078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	4b78      	ldr	r3, [pc, #480]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a77      	ldr	r2, [pc, #476]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 8003084:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e01d      	b.n	80030c8 <HAL_RCC_OscConfig+0xd4>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003094:	d10c      	bne.n	80030b0 <HAL_RCC_OscConfig+0xbc>
 8003096:	4b72      	ldr	r3, [pc, #456]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a71      	ldr	r2, [pc, #452]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 800309c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	4b6f      	ldr	r3, [pc, #444]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a6e      	ldr	r2, [pc, #440]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 80030a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	e00b      	b.n	80030c8 <HAL_RCC_OscConfig+0xd4>
 80030b0:	4b6b      	ldr	r3, [pc, #428]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a6a      	ldr	r2, [pc, #424]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 80030b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	4b68      	ldr	r3, [pc, #416]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a67      	ldr	r2, [pc, #412]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 80030c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d013      	beq.n	80030f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7ff fd0a 	bl	8002ae8 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d8:	f7ff fd06 	bl	8002ae8 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	; 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e1fa      	b.n	80034e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ea:	4b5d      	ldr	r3, [pc, #372]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0xe4>
 80030f6:	e014      	b.n	8003122 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7ff fcf6 	bl	8002ae8 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003100:	f7ff fcf2 	bl	8002ae8 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b64      	cmp	r3, #100	; 0x64
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e1e6      	b.n	80034e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003112:	4b53      	ldr	r3, [pc, #332]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0x10c>
 800311e:	e000      	b.n	8003122 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d063      	beq.n	80031f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800312e:	4b4c      	ldr	r3, [pc, #304]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00b      	beq.n	8003152 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800313a:	4b49      	ldr	r3, [pc, #292]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	2b08      	cmp	r3, #8
 8003144:	d11c      	bne.n	8003180 <HAL_RCC_OscConfig+0x18c>
 8003146:	4b46      	ldr	r3, [pc, #280]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d116      	bne.n	8003180 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003152:	4b43      	ldr	r3, [pc, #268]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <HAL_RCC_OscConfig+0x176>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d001      	beq.n	800316a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e1ba      	b.n	80034e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316a:	4b3d      	ldr	r3, [pc, #244]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	4939      	ldr	r1, [pc, #228]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 800317a:	4313      	orrs	r3, r2
 800317c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317e:	e03a      	b.n	80031f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d020      	beq.n	80031ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003188:	4b36      	ldr	r3, [pc, #216]	; (8003264 <HAL_RCC_OscConfig+0x270>)
 800318a:	2201      	movs	r2, #1
 800318c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318e:	f7ff fcab 	bl	8002ae8 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003196:	f7ff fca7 	bl	8002ae8 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e19b      	b.n	80034e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a8:	4b2d      	ldr	r3, [pc, #180]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f0      	beq.n	8003196 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b4:	4b2a      	ldr	r3, [pc, #168]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4927      	ldr	r1, [pc, #156]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	600b      	str	r3, [r1, #0]
 80031c8:	e015      	b.n	80031f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ca:	4b26      	ldr	r3, [pc, #152]	; (8003264 <HAL_RCC_OscConfig+0x270>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d0:	f7ff fc8a 	bl	8002ae8 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031d8:	f7ff fc86 	bl	8002ae8 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e17a      	b.n	80034e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ea:	4b1d      	ldr	r3, [pc, #116]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d03a      	beq.n	8003278 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d019      	beq.n	800323e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800320a:	4b17      	ldr	r3, [pc, #92]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 800320c:	2201      	movs	r2, #1
 800320e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003210:	f7ff fc6a 	bl	8002ae8 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003218:	f7ff fc66 	bl	8002ae8 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e15a      	b.n	80034e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322a:	4b0d      	ldr	r3, [pc, #52]	; (8003260 <HAL_RCC_OscConfig+0x26c>)
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003236:	2001      	movs	r0, #1
 8003238:	f000 fae8 	bl	800380c <RCC_Delay>
 800323c:	e01c      	b.n	8003278 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800323e:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003244:	f7ff fc50 	bl	8002ae8 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800324a:	e00f      	b.n	800326c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800324c:	f7ff fc4c 	bl	8002ae8 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d908      	bls.n	800326c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e140      	b.n	80034e0 <HAL_RCC_OscConfig+0x4ec>
 800325e:	bf00      	nop
 8003260:	40021000 	.word	0x40021000
 8003264:	42420000 	.word	0x42420000
 8003268:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800326c:	4b9e      	ldr	r3, [pc, #632]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1e9      	bne.n	800324c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 80a6 	beq.w	80033d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003286:	2300      	movs	r3, #0
 8003288:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800328a:	4b97      	ldr	r3, [pc, #604]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10d      	bne.n	80032b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003296:	4b94      	ldr	r3, [pc, #592]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	4a93      	ldr	r2, [pc, #588]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 800329c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a0:	61d3      	str	r3, [r2, #28]
 80032a2:	4b91      	ldr	r3, [pc, #580]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032aa:	60bb      	str	r3, [r7, #8]
 80032ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ae:	2301      	movs	r3, #1
 80032b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b2:	4b8e      	ldr	r3, [pc, #568]	; (80034ec <HAL_RCC_OscConfig+0x4f8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d118      	bne.n	80032f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032be:	4b8b      	ldr	r3, [pc, #556]	; (80034ec <HAL_RCC_OscConfig+0x4f8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a8a      	ldr	r2, [pc, #552]	; (80034ec <HAL_RCC_OscConfig+0x4f8>)
 80032c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ca:	f7ff fc0d 	bl	8002ae8 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d2:	f7ff fc09 	bl	8002ae8 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b64      	cmp	r3, #100	; 0x64
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e0fd      	b.n	80034e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e4:	4b81      	ldr	r3, [pc, #516]	; (80034ec <HAL_RCC_OscConfig+0x4f8>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d106      	bne.n	8003306 <HAL_RCC_OscConfig+0x312>
 80032f8:	4b7b      	ldr	r3, [pc, #492]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	4a7a      	ldr	r2, [pc, #488]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 80032fe:	f043 0301 	orr.w	r3, r3, #1
 8003302:	6213      	str	r3, [r2, #32]
 8003304:	e02d      	b.n	8003362 <HAL_RCC_OscConfig+0x36e>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10c      	bne.n	8003328 <HAL_RCC_OscConfig+0x334>
 800330e:	4b76      	ldr	r3, [pc, #472]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	4a75      	ldr	r2, [pc, #468]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 8003314:	f023 0301 	bic.w	r3, r3, #1
 8003318:	6213      	str	r3, [r2, #32]
 800331a:	4b73      	ldr	r3, [pc, #460]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	4a72      	ldr	r2, [pc, #456]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 8003320:	f023 0304 	bic.w	r3, r3, #4
 8003324:	6213      	str	r3, [r2, #32]
 8003326:	e01c      	b.n	8003362 <HAL_RCC_OscConfig+0x36e>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	2b05      	cmp	r3, #5
 800332e:	d10c      	bne.n	800334a <HAL_RCC_OscConfig+0x356>
 8003330:	4b6d      	ldr	r3, [pc, #436]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	4a6c      	ldr	r2, [pc, #432]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 8003336:	f043 0304 	orr.w	r3, r3, #4
 800333a:	6213      	str	r3, [r2, #32]
 800333c:	4b6a      	ldr	r3, [pc, #424]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	4a69      	ldr	r2, [pc, #420]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	6213      	str	r3, [r2, #32]
 8003348:	e00b      	b.n	8003362 <HAL_RCC_OscConfig+0x36e>
 800334a:	4b67      	ldr	r3, [pc, #412]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	4a66      	ldr	r2, [pc, #408]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 8003350:	f023 0301 	bic.w	r3, r3, #1
 8003354:	6213      	str	r3, [r2, #32]
 8003356:	4b64      	ldr	r3, [pc, #400]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	4a63      	ldr	r2, [pc, #396]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 800335c:	f023 0304 	bic.w	r3, r3, #4
 8003360:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d015      	beq.n	8003396 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800336a:	f7ff fbbd 	bl	8002ae8 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003370:	e00a      	b.n	8003388 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003372:	f7ff fbb9 	bl	8002ae8 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003380:	4293      	cmp	r3, r2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e0ab      	b.n	80034e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003388:	4b57      	ldr	r3, [pc, #348]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0ee      	beq.n	8003372 <HAL_RCC_OscConfig+0x37e>
 8003394:	e014      	b.n	80033c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003396:	f7ff fba7 	bl	8002ae8 <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800339c:	e00a      	b.n	80033b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800339e:	f7ff fba3 	bl	8002ae8 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e095      	b.n	80034e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b4:	4b4c      	ldr	r3, [pc, #304]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1ee      	bne.n	800339e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033c0:	7dfb      	ldrb	r3, [r7, #23]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d105      	bne.n	80033d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c6:	4b48      	ldr	r3, [pc, #288]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	4a47      	ldr	r2, [pc, #284]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 80033cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 8081 	beq.w	80034de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033dc:	4b42      	ldr	r3, [pc, #264]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f003 030c 	and.w	r3, r3, #12
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d061      	beq.n	80034ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d146      	bne.n	800347e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f0:	4b3f      	ldr	r3, [pc, #252]	; (80034f0 <HAL_RCC_OscConfig+0x4fc>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f6:	f7ff fb77 	bl	8002ae8 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033fe:	f7ff fb73 	bl	8002ae8 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e067      	b.n	80034e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003410:	4b35      	ldr	r3, [pc, #212]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1f0      	bne.n	80033fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003424:	d108      	bne.n	8003438 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003426:	4b30      	ldr	r3, [pc, #192]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	492d      	ldr	r1, [pc, #180]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 8003434:	4313      	orrs	r3, r2
 8003436:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003438:	4b2b      	ldr	r3, [pc, #172]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a19      	ldr	r1, [r3, #32]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	430b      	orrs	r3, r1
 800344a:	4927      	ldr	r1, [pc, #156]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 800344c:	4313      	orrs	r3, r2
 800344e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003450:	4b27      	ldr	r3, [pc, #156]	; (80034f0 <HAL_RCC_OscConfig+0x4fc>)
 8003452:	2201      	movs	r2, #1
 8003454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003456:	f7ff fb47 	bl	8002ae8 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345e:	f7ff fb43 	bl	8002ae8 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e037      	b.n	80034e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003470:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0f0      	beq.n	800345e <HAL_RCC_OscConfig+0x46a>
 800347c:	e02f      	b.n	80034de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347e:	4b1c      	ldr	r3, [pc, #112]	; (80034f0 <HAL_RCC_OscConfig+0x4fc>)
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003484:	f7ff fb30 	bl	8002ae8 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348c:	f7ff fb2c 	bl	8002ae8 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e020      	b.n	80034e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800349e:	4b12      	ldr	r3, [pc, #72]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x498>
 80034aa:	e018      	b.n	80034de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d101      	bne.n	80034b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e013      	b.n	80034e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034b8:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <HAL_RCC_OscConfig+0x4f4>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d106      	bne.n	80034da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d001      	beq.n	80034de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e000      	b.n	80034e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40021000 	.word	0x40021000
 80034ec:	40007000 	.word	0x40007000
 80034f0:	42420060 	.word	0x42420060

080034f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e0d0      	b.n	80036aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003508:	4b6a      	ldr	r3, [pc, #424]	; (80036b4 <HAL_RCC_ClockConfig+0x1c0>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d910      	bls.n	8003538 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003516:	4b67      	ldr	r3, [pc, #412]	; (80036b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 0207 	bic.w	r2, r3, #7
 800351e:	4965      	ldr	r1, [pc, #404]	; (80036b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	4313      	orrs	r3, r2
 8003524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b63      	ldr	r3, [pc, #396]	; (80036b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0b8      	b.n	80036aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d020      	beq.n	8003586 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003550:	4b59      	ldr	r3, [pc, #356]	; (80036b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	4a58      	ldr	r2, [pc, #352]	; (80036b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003556:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800355a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003568:	4b53      	ldr	r3, [pc, #332]	; (80036b8 <HAL_RCC_ClockConfig+0x1c4>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	4a52      	ldr	r2, [pc, #328]	; (80036b8 <HAL_RCC_ClockConfig+0x1c4>)
 800356e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003572:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003574:	4b50      	ldr	r3, [pc, #320]	; (80036b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	494d      	ldr	r1, [pc, #308]	; (80036b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003582:	4313      	orrs	r3, r2
 8003584:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d040      	beq.n	8003614 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d107      	bne.n	80035aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359a:	4b47      	ldr	r3, [pc, #284]	; (80036b8 <HAL_RCC_ClockConfig+0x1c4>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d115      	bne.n	80035d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e07f      	b.n	80036aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d107      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b2:	4b41      	ldr	r3, [pc, #260]	; (80036b8 <HAL_RCC_ClockConfig+0x1c4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d109      	bne.n	80035d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e073      	b.n	80036aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c2:	4b3d      	ldr	r3, [pc, #244]	; (80036b8 <HAL_RCC_ClockConfig+0x1c4>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e06b      	b.n	80036aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035d2:	4b39      	ldr	r3, [pc, #228]	; (80036b8 <HAL_RCC_ClockConfig+0x1c4>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f023 0203 	bic.w	r2, r3, #3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	4936      	ldr	r1, [pc, #216]	; (80036b8 <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035e4:	f7ff fa80 	bl	8002ae8 <HAL_GetTick>
 80035e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ea:	e00a      	b.n	8003602 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035ec:	f7ff fa7c 	bl	8002ae8 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e053      	b.n	80036aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003602:	4b2d      	ldr	r3, [pc, #180]	; (80036b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f003 020c 	and.w	r2, r3, #12
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	429a      	cmp	r2, r3
 8003612:	d1eb      	bne.n	80035ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003614:	4b27      	ldr	r3, [pc, #156]	; (80036b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	429a      	cmp	r2, r3
 8003620:	d210      	bcs.n	8003644 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003622:	4b24      	ldr	r3, [pc, #144]	; (80036b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f023 0207 	bic.w	r2, r3, #7
 800362a:	4922      	ldr	r1, [pc, #136]	; (80036b4 <HAL_RCC_ClockConfig+0x1c0>)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	4313      	orrs	r3, r2
 8003630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003632:	4b20      	ldr	r3, [pc, #128]	; (80036b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d001      	beq.n	8003644 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e032      	b.n	80036aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003650:	4b19      	ldr	r3, [pc, #100]	; (80036b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4916      	ldr	r1, [pc, #88]	; (80036b8 <HAL_RCC_ClockConfig+0x1c4>)
 800365e:	4313      	orrs	r3, r2
 8003660:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d009      	beq.n	8003682 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800366e:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	490e      	ldr	r1, [pc, #56]	; (80036b8 <HAL_RCC_ClockConfig+0x1c4>)
 800367e:	4313      	orrs	r3, r2
 8003680:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003682:	f000 f821 	bl	80036c8 <HAL_RCC_GetSysClockFreq>
 8003686:	4602      	mov	r2, r0
 8003688:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <HAL_RCC_ClockConfig+0x1c4>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	091b      	lsrs	r3, r3, #4
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	490a      	ldr	r1, [pc, #40]	; (80036bc <HAL_RCC_ClockConfig+0x1c8>)
 8003694:	5ccb      	ldrb	r3, [r1, r3]
 8003696:	fa22 f303 	lsr.w	r3, r2, r3
 800369a:	4a09      	ldr	r2, [pc, #36]	; (80036c0 <HAL_RCC_ClockConfig+0x1cc>)
 800369c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800369e:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <HAL_RCC_ClockConfig+0x1d0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fd fcf4 	bl	8001090 <HAL_InitTick>

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40022000 	.word	0x40022000
 80036b8:	40021000 	.word	0x40021000
 80036bc:	08003f20 	.word	0x08003f20
 80036c0:	20000004 	.word	0x20000004
 80036c4:	2000000c 	.word	0x2000000c

080036c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	2300      	movs	r3, #0
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	2300      	movs	r3, #0
 80036dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036e2:	4b1e      	ldr	r3, [pc, #120]	; (800375c <HAL_RCC_GetSysClockFreq+0x94>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d002      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0x30>
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d003      	beq.n	80036fe <HAL_RCC_GetSysClockFreq+0x36>
 80036f6:	e027      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036f8:	4b19      	ldr	r3, [pc, #100]	; (8003760 <HAL_RCC_GetSysClockFreq+0x98>)
 80036fa:	613b      	str	r3, [r7, #16]
      break;
 80036fc:	e027      	b.n	800374e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	0c9b      	lsrs	r3, r3, #18
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	4a17      	ldr	r2, [pc, #92]	; (8003764 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003708:	5cd3      	ldrb	r3, [r2, r3]
 800370a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d010      	beq.n	8003738 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003716:	4b11      	ldr	r3, [pc, #68]	; (800375c <HAL_RCC_GetSysClockFreq+0x94>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	0c5b      	lsrs	r3, r3, #17
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	4a11      	ldr	r2, [pc, #68]	; (8003768 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003722:	5cd3      	ldrb	r3, [r2, r3]
 8003724:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a0d      	ldr	r2, [pc, #52]	; (8003760 <HAL_RCC_GetSysClockFreq+0x98>)
 800372a:	fb02 f203 	mul.w	r2, r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	fbb2 f3f3 	udiv	r3, r2, r3
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	e004      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a0c      	ldr	r2, [pc, #48]	; (800376c <HAL_RCC_GetSysClockFreq+0xa4>)
 800373c:	fb02 f303 	mul.w	r3, r2, r3
 8003740:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	613b      	str	r3, [r7, #16]
      break;
 8003746:	e002      	b.n	800374e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003748:	4b05      	ldr	r3, [pc, #20]	; (8003760 <HAL_RCC_GetSysClockFreq+0x98>)
 800374a:	613b      	str	r3, [r7, #16]
      break;
 800374c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800374e:	693b      	ldr	r3, [r7, #16]
}
 8003750:	4618      	mov	r0, r3
 8003752:	371c      	adds	r7, #28
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40021000 	.word	0x40021000
 8003760:	007a1200 	.word	0x007a1200
 8003764:	08003f38 	.word	0x08003f38
 8003768:	08003f48 	.word	0x08003f48
 800376c:	003d0900 	.word	0x003d0900

08003770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003774:	4b02      	ldr	r3, [pc, #8]	; (8003780 <HAL_RCC_GetHCLKFreq+0x10>)
 8003776:	681b      	ldr	r3, [r3, #0]
}
 8003778:	4618      	mov	r0, r3
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr
 8003780:	20000004 	.word	0x20000004

08003784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003788:	f7ff fff2 	bl	8003770 <HAL_RCC_GetHCLKFreq>
 800378c:	4602      	mov	r2, r0
 800378e:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	0adb      	lsrs	r3, r3, #11
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	4903      	ldr	r1, [pc, #12]	; (80037a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800379a:	5ccb      	ldrb	r3, [r1, r3]
 800379c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40021000 	.word	0x40021000
 80037a8:	08003f30 	.word	0x08003f30

080037ac <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	220f      	movs	r2, #15
 80037ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037bc:	4b11      	ldr	r3, [pc, #68]	; (8003804 <HAL_RCC_GetClockConfig+0x58>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f003 0203 	and.w	r2, r3, #3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80037c8:	4b0e      	ldr	r3, [pc, #56]	; (8003804 <HAL_RCC_GetClockConfig+0x58>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80037d4:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <HAL_RCC_GetClockConfig+0x58>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80037e0:	4b08      	ldr	r3, [pc, #32]	; (8003804 <HAL_RCC_GetClockConfig+0x58>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	08db      	lsrs	r3, r3, #3
 80037e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <HAL_RCC_GetClockConfig+0x5c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0207 	and.w	r2, r3, #7
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr
 8003804:	40021000 	.word	0x40021000
 8003808:	40022000 	.word	0x40022000

0800380c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003814:	4b0a      	ldr	r3, [pc, #40]	; (8003840 <RCC_Delay+0x34>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a0a      	ldr	r2, [pc, #40]	; (8003844 <RCC_Delay+0x38>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	0a5b      	lsrs	r3, r3, #9
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	fb02 f303 	mul.w	r3, r2, r3
 8003826:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003828:	bf00      	nop
  }
  while (Delay --);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	1e5a      	subs	r2, r3, #1
 800382e:	60fa      	str	r2, [r7, #12]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1f9      	bne.n	8003828 <RCC_Delay+0x1c>
}
 8003834:	bf00      	nop
 8003836:	bf00      	nop
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr
 8003840:	20000004 	.word	0x20000004
 8003844:	10624dd3 	.word	0x10624dd3

08003848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e041      	b.n	80038de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f839 	bl	80038e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3304      	adds	r3, #4
 8003884:	4619      	mov	r1, r3
 8003886:	4610      	mov	r0, r2
 8003888:	f000 f99c 	bl	8003bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr

080038f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b01      	cmp	r3, #1
 800390a:	d001      	beq.n	8003910 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e03a      	b.n	8003986 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2202      	movs	r2, #2
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68da      	ldr	r2, [r3, #12]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a18      	ldr	r2, [pc, #96]	; (8003990 <HAL_TIM_Base_Start_IT+0x98>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00e      	beq.n	8003950 <HAL_TIM_Base_Start_IT+0x58>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800393a:	d009      	beq.n	8003950 <HAL_TIM_Base_Start_IT+0x58>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a14      	ldr	r2, [pc, #80]	; (8003994 <HAL_TIM_Base_Start_IT+0x9c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d004      	beq.n	8003950 <HAL_TIM_Base_Start_IT+0x58>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a13      	ldr	r2, [pc, #76]	; (8003998 <HAL_TIM_Base_Start_IT+0xa0>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d111      	bne.n	8003974 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2b06      	cmp	r3, #6
 8003960:	d010      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f042 0201 	orr.w	r2, r2, #1
 8003970:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003972:	e007      	b.n	8003984 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr
 8003990:	40012c00 	.word	0x40012c00
 8003994:	40000400 	.word	0x40000400
 8003998:	40000800 	.word	0x40000800

0800399c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d020      	beq.n	8003a00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d01b      	beq.n	8003a00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f06f 0202 	mvn.w	r2, #2
 80039d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f8d1 	bl	8003b8e <HAL_TIM_IC_CaptureCallback>
 80039ec:	e005      	b.n	80039fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f8c4 	bl	8003b7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f8d3 	bl	8003ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f003 0304 	and.w	r3, r3, #4
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d020      	beq.n	8003a4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d01b      	beq.n	8003a4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f06f 0204 	mvn.w	r2, #4
 8003a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2202      	movs	r2, #2
 8003a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f8ab 	bl	8003b8e <HAL_TIM_IC_CaptureCallback>
 8003a38:	e005      	b.n	8003a46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f89e 	bl	8003b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 f8ad 	bl	8003ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d020      	beq.n	8003a98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d01b      	beq.n	8003a98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f06f 0208 	mvn.w	r2, #8
 8003a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2204      	movs	r2, #4
 8003a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f885 	bl	8003b8e <HAL_TIM_IC_CaptureCallback>
 8003a84:	e005      	b.n	8003a92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f878 	bl	8003b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f887 	bl	8003ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f003 0310 	and.w	r3, r3, #16
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d020      	beq.n	8003ae4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f003 0310 	and.w	r3, r3, #16
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d01b      	beq.n	8003ae4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0210 	mvn.w	r2, #16
 8003ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2208      	movs	r2, #8
 8003aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f85f 	bl	8003b8e <HAL_TIM_IC_CaptureCallback>
 8003ad0:	e005      	b.n	8003ade <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f852 	bl	8003b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f861 	bl	8003ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00c      	beq.n	8003b08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d007      	beq.n	8003b08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0201 	mvn.w	r2, #1
 8003b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fc fcee 	bl	80004e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00c      	beq.n	8003b2c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d007      	beq.n	8003b2c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f8c3 	bl	8003cb2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00c      	beq.n	8003b50 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d007      	beq.n	8003b50 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f831 	bl	8003bb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f003 0320 	and.w	r3, r3, #32
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00c      	beq.n	8003b74 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d007      	beq.n	8003b74 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f06f 0220 	mvn.w	r2, #32
 8003b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f896 	bl	8003ca0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b74:	bf00      	nop
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr

08003b8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bc80      	pop	{r7}
 8003bb0:	4770      	bx	lr

08003bb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr

08003bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a2f      	ldr	r2, [pc, #188]	; (8003c94 <TIM_Base_SetConfig+0xd0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d00b      	beq.n	8003bf4 <TIM_Base_SetConfig+0x30>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be2:	d007      	beq.n	8003bf4 <TIM_Base_SetConfig+0x30>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a2c      	ldr	r2, [pc, #176]	; (8003c98 <TIM_Base_SetConfig+0xd4>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d003      	beq.n	8003bf4 <TIM_Base_SetConfig+0x30>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a2b      	ldr	r2, [pc, #172]	; (8003c9c <TIM_Base_SetConfig+0xd8>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d108      	bne.n	8003c06 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a22      	ldr	r2, [pc, #136]	; (8003c94 <TIM_Base_SetConfig+0xd0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00b      	beq.n	8003c26 <TIM_Base_SetConfig+0x62>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c14:	d007      	beq.n	8003c26 <TIM_Base_SetConfig+0x62>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a1f      	ldr	r2, [pc, #124]	; (8003c98 <TIM_Base_SetConfig+0xd4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d003      	beq.n	8003c26 <TIM_Base_SetConfig+0x62>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a1e      	ldr	r2, [pc, #120]	; (8003c9c <TIM_Base_SetConfig+0xd8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d108      	bne.n	8003c38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a0d      	ldr	r2, [pc, #52]	; (8003c94 <TIM_Base_SetConfig+0xd0>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d103      	bne.n	8003c6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	691a      	ldr	r2, [r3, #16]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d005      	beq.n	8003c8a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f023 0201 	bic.w	r2, r3, #1
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	611a      	str	r2, [r3, #16]
  }
}
 8003c8a:	bf00      	nop
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bc80      	pop	{r7}
 8003c92:	4770      	bx	lr
 8003c94:	40012c00 	.word	0x40012c00
 8003c98:	40000400 	.word	0x40000400
 8003c9c:	40000800 	.word	0x40000800

08003ca0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bc80      	pop	{r7}
 8003cb0:	4770      	bx	lr

08003cb2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr

08003cc4 <__errno>:
 8003cc4:	4b01      	ldr	r3, [pc, #4]	; (8003ccc <__errno+0x8>)
 8003cc6:	6818      	ldr	r0, [r3, #0]
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	20000014 	.word	0x20000014

08003cd0 <__libc_init_array>:
 8003cd0:	b570      	push	{r4, r5, r6, lr}
 8003cd2:	2600      	movs	r6, #0
 8003cd4:	4d0c      	ldr	r5, [pc, #48]	; (8003d08 <__libc_init_array+0x38>)
 8003cd6:	4c0d      	ldr	r4, [pc, #52]	; (8003d0c <__libc_init_array+0x3c>)
 8003cd8:	1b64      	subs	r4, r4, r5
 8003cda:	10a4      	asrs	r4, r4, #2
 8003cdc:	42a6      	cmp	r6, r4
 8003cde:	d109      	bne.n	8003cf4 <__libc_init_array+0x24>
 8003ce0:	f000 f904 	bl	8003eec <_init>
 8003ce4:	2600      	movs	r6, #0
 8003ce6:	4d0a      	ldr	r5, [pc, #40]	; (8003d10 <__libc_init_array+0x40>)
 8003ce8:	4c0a      	ldr	r4, [pc, #40]	; (8003d14 <__libc_init_array+0x44>)
 8003cea:	1b64      	subs	r4, r4, r5
 8003cec:	10a4      	asrs	r4, r4, #2
 8003cee:	42a6      	cmp	r6, r4
 8003cf0:	d105      	bne.n	8003cfe <__libc_init_array+0x2e>
 8003cf2:	bd70      	pop	{r4, r5, r6, pc}
 8003cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cf8:	4798      	blx	r3
 8003cfa:	3601      	adds	r6, #1
 8003cfc:	e7ee      	b.n	8003cdc <__libc_init_array+0xc>
 8003cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d02:	4798      	blx	r3
 8003d04:	3601      	adds	r6, #1
 8003d06:	e7f2      	b.n	8003cee <__libc_init_array+0x1e>
 8003d08:	08003f4c 	.word	0x08003f4c
 8003d0c:	08003f4c 	.word	0x08003f4c
 8003d10:	08003f4c 	.word	0x08003f4c
 8003d14:	08003f50 	.word	0x08003f50

08003d18 <malloc>:
 8003d18:	4b02      	ldr	r3, [pc, #8]	; (8003d24 <malloc+0xc>)
 8003d1a:	4601      	mov	r1, r0
 8003d1c:	6818      	ldr	r0, [r3, #0]
 8003d1e:	f000 b86d 	b.w	8003dfc <_malloc_r>
 8003d22:	bf00      	nop
 8003d24:	20000014 	.word	0x20000014

08003d28 <free>:
 8003d28:	4b02      	ldr	r3, [pc, #8]	; (8003d34 <free+0xc>)
 8003d2a:	4601      	mov	r1, r0
 8003d2c:	6818      	ldr	r0, [r3, #0]
 8003d2e:	f000 b819 	b.w	8003d64 <_free_r>
 8003d32:	bf00      	nop
 8003d34:	20000014 	.word	0x20000014

08003d38 <memcpy>:
 8003d38:	440a      	add	r2, r1
 8003d3a:	4291      	cmp	r1, r2
 8003d3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d40:	d100      	bne.n	8003d44 <memcpy+0xc>
 8003d42:	4770      	bx	lr
 8003d44:	b510      	push	{r4, lr}
 8003d46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d4a:	4291      	cmp	r1, r2
 8003d4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d50:	d1f9      	bne.n	8003d46 <memcpy+0xe>
 8003d52:	bd10      	pop	{r4, pc}

08003d54 <memset>:
 8003d54:	4603      	mov	r3, r0
 8003d56:	4402      	add	r2, r0
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d100      	bne.n	8003d5e <memset+0xa>
 8003d5c:	4770      	bx	lr
 8003d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d62:	e7f9      	b.n	8003d58 <memset+0x4>

08003d64 <_free_r>:
 8003d64:	b538      	push	{r3, r4, r5, lr}
 8003d66:	4605      	mov	r5, r0
 8003d68:	2900      	cmp	r1, #0
 8003d6a:	d043      	beq.n	8003df4 <_free_r+0x90>
 8003d6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d70:	1f0c      	subs	r4, r1, #4
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	bfb8      	it	lt
 8003d76:	18e4      	addlt	r4, r4, r3
 8003d78:	f000 f8aa 	bl	8003ed0 <__malloc_lock>
 8003d7c:	4a1e      	ldr	r2, [pc, #120]	; (8003df8 <_free_r+0x94>)
 8003d7e:	6813      	ldr	r3, [r2, #0]
 8003d80:	4610      	mov	r0, r2
 8003d82:	b933      	cbnz	r3, 8003d92 <_free_r+0x2e>
 8003d84:	6063      	str	r3, [r4, #4]
 8003d86:	6014      	str	r4, [r2, #0]
 8003d88:	4628      	mov	r0, r5
 8003d8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d8e:	f000 b8a5 	b.w	8003edc <__malloc_unlock>
 8003d92:	42a3      	cmp	r3, r4
 8003d94:	d90a      	bls.n	8003dac <_free_r+0x48>
 8003d96:	6821      	ldr	r1, [r4, #0]
 8003d98:	1862      	adds	r2, r4, r1
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	bf01      	itttt	eq
 8003d9e:	681a      	ldreq	r2, [r3, #0]
 8003da0:	685b      	ldreq	r3, [r3, #4]
 8003da2:	1852      	addeq	r2, r2, r1
 8003da4:	6022      	streq	r2, [r4, #0]
 8003da6:	6063      	str	r3, [r4, #4]
 8003da8:	6004      	str	r4, [r0, #0]
 8003daa:	e7ed      	b.n	8003d88 <_free_r+0x24>
 8003dac:	461a      	mov	r2, r3
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	b10b      	cbz	r3, 8003db6 <_free_r+0x52>
 8003db2:	42a3      	cmp	r3, r4
 8003db4:	d9fa      	bls.n	8003dac <_free_r+0x48>
 8003db6:	6811      	ldr	r1, [r2, #0]
 8003db8:	1850      	adds	r0, r2, r1
 8003dba:	42a0      	cmp	r0, r4
 8003dbc:	d10b      	bne.n	8003dd6 <_free_r+0x72>
 8003dbe:	6820      	ldr	r0, [r4, #0]
 8003dc0:	4401      	add	r1, r0
 8003dc2:	1850      	adds	r0, r2, r1
 8003dc4:	4283      	cmp	r3, r0
 8003dc6:	6011      	str	r1, [r2, #0]
 8003dc8:	d1de      	bne.n	8003d88 <_free_r+0x24>
 8003dca:	6818      	ldr	r0, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	4401      	add	r1, r0
 8003dd0:	6011      	str	r1, [r2, #0]
 8003dd2:	6053      	str	r3, [r2, #4]
 8003dd4:	e7d8      	b.n	8003d88 <_free_r+0x24>
 8003dd6:	d902      	bls.n	8003dde <_free_r+0x7a>
 8003dd8:	230c      	movs	r3, #12
 8003dda:	602b      	str	r3, [r5, #0]
 8003ddc:	e7d4      	b.n	8003d88 <_free_r+0x24>
 8003dde:	6820      	ldr	r0, [r4, #0]
 8003de0:	1821      	adds	r1, r4, r0
 8003de2:	428b      	cmp	r3, r1
 8003de4:	bf01      	itttt	eq
 8003de6:	6819      	ldreq	r1, [r3, #0]
 8003de8:	685b      	ldreq	r3, [r3, #4]
 8003dea:	1809      	addeq	r1, r1, r0
 8003dec:	6021      	streq	r1, [r4, #0]
 8003dee:	6063      	str	r3, [r4, #4]
 8003df0:	6054      	str	r4, [r2, #4]
 8003df2:	e7c9      	b.n	8003d88 <_free_r+0x24>
 8003df4:	bd38      	pop	{r3, r4, r5, pc}
 8003df6:	bf00      	nop
 8003df8:	200001ec 	.word	0x200001ec

08003dfc <_malloc_r>:
 8003dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfe:	1ccd      	adds	r5, r1, #3
 8003e00:	f025 0503 	bic.w	r5, r5, #3
 8003e04:	3508      	adds	r5, #8
 8003e06:	2d0c      	cmp	r5, #12
 8003e08:	bf38      	it	cc
 8003e0a:	250c      	movcc	r5, #12
 8003e0c:	2d00      	cmp	r5, #0
 8003e0e:	4606      	mov	r6, r0
 8003e10:	db01      	blt.n	8003e16 <_malloc_r+0x1a>
 8003e12:	42a9      	cmp	r1, r5
 8003e14:	d903      	bls.n	8003e1e <_malloc_r+0x22>
 8003e16:	230c      	movs	r3, #12
 8003e18:	6033      	str	r3, [r6, #0]
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e1e:	f000 f857 	bl	8003ed0 <__malloc_lock>
 8003e22:	4921      	ldr	r1, [pc, #132]	; (8003ea8 <_malloc_r+0xac>)
 8003e24:	680a      	ldr	r2, [r1, #0]
 8003e26:	4614      	mov	r4, r2
 8003e28:	b99c      	cbnz	r4, 8003e52 <_malloc_r+0x56>
 8003e2a:	4f20      	ldr	r7, [pc, #128]	; (8003eac <_malloc_r+0xb0>)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	b923      	cbnz	r3, 8003e3a <_malloc_r+0x3e>
 8003e30:	4621      	mov	r1, r4
 8003e32:	4630      	mov	r0, r6
 8003e34:	f000 f83c 	bl	8003eb0 <_sbrk_r>
 8003e38:	6038      	str	r0, [r7, #0]
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	4630      	mov	r0, r6
 8003e3e:	f000 f837 	bl	8003eb0 <_sbrk_r>
 8003e42:	1c43      	adds	r3, r0, #1
 8003e44:	d123      	bne.n	8003e8e <_malloc_r+0x92>
 8003e46:	230c      	movs	r3, #12
 8003e48:	4630      	mov	r0, r6
 8003e4a:	6033      	str	r3, [r6, #0]
 8003e4c:	f000 f846 	bl	8003edc <__malloc_unlock>
 8003e50:	e7e3      	b.n	8003e1a <_malloc_r+0x1e>
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	1b5b      	subs	r3, r3, r5
 8003e56:	d417      	bmi.n	8003e88 <_malloc_r+0x8c>
 8003e58:	2b0b      	cmp	r3, #11
 8003e5a:	d903      	bls.n	8003e64 <_malloc_r+0x68>
 8003e5c:	6023      	str	r3, [r4, #0]
 8003e5e:	441c      	add	r4, r3
 8003e60:	6025      	str	r5, [r4, #0]
 8003e62:	e004      	b.n	8003e6e <_malloc_r+0x72>
 8003e64:	6863      	ldr	r3, [r4, #4]
 8003e66:	42a2      	cmp	r2, r4
 8003e68:	bf0c      	ite	eq
 8003e6a:	600b      	streq	r3, [r1, #0]
 8003e6c:	6053      	strne	r3, [r2, #4]
 8003e6e:	4630      	mov	r0, r6
 8003e70:	f000 f834 	bl	8003edc <__malloc_unlock>
 8003e74:	f104 000b 	add.w	r0, r4, #11
 8003e78:	1d23      	adds	r3, r4, #4
 8003e7a:	f020 0007 	bic.w	r0, r0, #7
 8003e7e:	1ac2      	subs	r2, r0, r3
 8003e80:	d0cc      	beq.n	8003e1c <_malloc_r+0x20>
 8003e82:	1a1b      	subs	r3, r3, r0
 8003e84:	50a3      	str	r3, [r4, r2]
 8003e86:	e7c9      	b.n	8003e1c <_malloc_r+0x20>
 8003e88:	4622      	mov	r2, r4
 8003e8a:	6864      	ldr	r4, [r4, #4]
 8003e8c:	e7cc      	b.n	8003e28 <_malloc_r+0x2c>
 8003e8e:	1cc4      	adds	r4, r0, #3
 8003e90:	f024 0403 	bic.w	r4, r4, #3
 8003e94:	42a0      	cmp	r0, r4
 8003e96:	d0e3      	beq.n	8003e60 <_malloc_r+0x64>
 8003e98:	1a21      	subs	r1, r4, r0
 8003e9a:	4630      	mov	r0, r6
 8003e9c:	f000 f808 	bl	8003eb0 <_sbrk_r>
 8003ea0:	3001      	adds	r0, #1
 8003ea2:	d1dd      	bne.n	8003e60 <_malloc_r+0x64>
 8003ea4:	e7cf      	b.n	8003e46 <_malloc_r+0x4a>
 8003ea6:	bf00      	nop
 8003ea8:	200001ec 	.word	0x200001ec
 8003eac:	200001f0 	.word	0x200001f0

08003eb0 <_sbrk_r>:
 8003eb0:	b538      	push	{r3, r4, r5, lr}
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	4d05      	ldr	r5, [pc, #20]	; (8003ecc <_sbrk_r+0x1c>)
 8003eb6:	4604      	mov	r4, r0
 8003eb8:	4608      	mov	r0, r1
 8003eba:	602b      	str	r3, [r5, #0]
 8003ebc:	f7fd f95e 	bl	800117c <_sbrk>
 8003ec0:	1c43      	adds	r3, r0, #1
 8003ec2:	d102      	bne.n	8003eca <_sbrk_r+0x1a>
 8003ec4:	682b      	ldr	r3, [r5, #0]
 8003ec6:	b103      	cbz	r3, 8003eca <_sbrk_r+0x1a>
 8003ec8:	6023      	str	r3, [r4, #0]
 8003eca:	bd38      	pop	{r3, r4, r5, pc}
 8003ecc:	20000288 	.word	0x20000288

08003ed0 <__malloc_lock>:
 8003ed0:	4801      	ldr	r0, [pc, #4]	; (8003ed8 <__malloc_lock+0x8>)
 8003ed2:	f000 b809 	b.w	8003ee8 <__retarget_lock_acquire_recursive>
 8003ed6:	bf00      	nop
 8003ed8:	20000290 	.word	0x20000290

08003edc <__malloc_unlock>:
 8003edc:	4801      	ldr	r0, [pc, #4]	; (8003ee4 <__malloc_unlock+0x8>)
 8003ede:	f000 b804 	b.w	8003eea <__retarget_lock_release_recursive>
 8003ee2:	bf00      	nop
 8003ee4:	20000290 	.word	0x20000290

08003ee8 <__retarget_lock_acquire_recursive>:
 8003ee8:	4770      	bx	lr

08003eea <__retarget_lock_release_recursive>:
 8003eea:	4770      	bx	lr

08003eec <_init>:
 8003eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eee:	bf00      	nop
 8003ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef2:	bc08      	pop	{r3}
 8003ef4:	469e      	mov	lr, r3
 8003ef6:	4770      	bx	lr

08003ef8 <_fini>:
 8003ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efa:	bf00      	nop
 8003efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efe:	bc08      	pop	{r3}
 8003f00:	469e      	mov	lr, r3
 8003f02:	4770      	bx	lr
